#+title: Emacs Help

The purpose of =EmacsHelp.org= is to keep documentation on setups and configurations that are beyond the scope of =Emacs.org=. Any help with identifying key commands for Emacs or its packages will be in the =EmacsCommands.org= file 

* Magit

** GPG Signing

When on the commit buffer, the argument for =gpg-signing= or =-S= may not be displayed. To resolve this issue manually, on the commit buffer menu, you must enter transient mode with =C-x l= and follow the prompting from there by typing the argument that you want to change the layering and then set the layering.

* Org

To change the view to outline or full view use =SHIFT-TAB= repeatedly for the desired visual look.

To condense or uncondense content under a heading, make sure the cursor is on the same line as the heading and use =TAB= to cycle through uncondensing or condensing the content.

** Org-Latex

[[https://jakebox.github.io/youtube/org_latex_video.html][Straightfoward Emacs guide]]. The following is copied from that guide.

*** Create & include a =SETUPFILE=

A =SETUPFILE= is simply a file that contains some sort of org mode configuration. For example, the =#+LATEX_CLASS:= we saw earlier. Or, maybe =#+LATEX_HEADER:=. It could even be as simple as =#+TITLE:=. In this =SETUPFILE= we can place all of our lines of LaTeX code we want included in the final generated document. This is a very powerful and easy method of perfectly customizing our export.

Linking the =SETUPFILE=:

#+BEGIN_SRC

#+SETUPFILE: ~/Dropbox/Mackup/emacs-stuff/org/jake-standard-latex-export.org

#+END_SRC

*** Structure the =SETUPFILE=

Now, in that =SETUPFILE=, we place the LaTeX lines we normally would put in a =.tex= file. For example, =\usepackage{amsmath}=. Hopefully you have your own favorite =.tex= file setup, but if not I suggest learning LaTeX and/or finding a template online.

I suggest using a macro to add =#+LATEX_CLASS:= to each line, rather than typing it manually of course! Notice the =LaTeX_CLASS:= - the custom one we just created.

#+BEGIN_SRC

#+LaTeX_CLASS: org-plain-latex
#+LaTeX_CLASS_OPTIONS: [letter]
#+LATEX_HEADER: \usepackage{lmodern} % Ensures we have the right font

#+LATEX_HEADER: \usepackage[AUTO]{inputenc}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{amsmath, amsthm, amssymb}
#+LATEX_HEADER: \usepackage[table, xcdraw]{xcolor}

% and so on...

#+END_SRC

*** Extra Notes

Some notes not covered in the video.

Enable using =listings= for code highlighting

#+begin_src emacs-lisp

  (setq org-latex-listings 't)

#+end_src

In your =SETUPFILE:=

#+BEGIN_SRC

#+LATEX_HEADER: \usepackage{listings}

#+END_SRC

If you enable =org-latex-listings= but donâ€™t include the =listings= package in your TeX file, it will likely not compile (if you are exporting an org file with code blocks).

Useful commands

- =org-latex-preview= - toggles preview LaTeX math at point


** Org-transclude

Link to the docs: [[https://nobiot.github.io/org-transclusion/][org-transclude]]

** Org-todo and Org-agenda

To create a percentage completion rate simply add =[/][%]= and then do the command =C-c C-c=

* Pdf-tools

** Troubleshooting

*** Troubleshooting 2025-01-14: Does Not Work
:PROPERTIES:
:ID:       A127FEE8-7868-4EF3-9D84-8F3EDF8117A0
:END:
If you receive the option to rebuild the =epdfserver= and you agree to building on Emacs, there are instances where the build fails. When running =M-x pdf-tools-install= you will rebuild within Emacs and will obtain more information. If the error consists of not being able to find poppler, copy and paste the command used to run the installation and run it in the command line outside of emacs.

This solution seems to work currently as of 2025-01-14.

*** Troubleshooting 2025-01-15: Works
The issue with [[id:A127FEE8-7868-4EF3-9D84-8F3EDF8117A0][Troubleshooting 2025-01-14: Does Not Work]] is that if the installation works within the command line, when opening up a pdf file on Emacs would lead to the epdfserver crashing. This issue I found had to do with confict with =macports= being installed. If you uninstall macports, then the issue is resolved. 

* Sound Support

Usually this is a problem for macos and I found a snippet of code that enables sound support. The way to tell is by running =M-x play-sound-file= and navigating to the =.wav= file will ouput "This Emacs binary lacks sound support."

#+begin_src emacs-lisp

  ;; on macos, fix "This Emacs binary lacks sound support" 
  ;; - https://github.com/leoliu/play-sound-osx/blob/master/play-sound.el
  ;; - update according to https://github.com/leoliu/play-sound-osx/issues/2#issuecomment-1088360638
  (when (eq system-type 'darwin)
    (unless (and (fboundp 'play-sound-internal)
                 (subrp (symbol-function 'play-sound-internal)))
      (defun play-sound-internal (sound)
        "Internal function for `play-sound' (which see)."
        (or (eq (car-safe sound) 'sound)
            (signal 'wrong-type-argument (list sound)))
      
        (cl-destructuring-bind (&key file data volume device)
            (cdr sound)
        
          (and (or data device)
               (error "DATA and DEVICE arg not supported"))
        
          (apply #'start-process "afplay" nil
                 "afplay" (append (and volume (list "-v" volume))
                                  (list (expand-file-name file data-directory))))))))

#+end_src




