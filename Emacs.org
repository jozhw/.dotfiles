#+title: Emacs Configuration

* Inspirations of this Emacs configuration

The organization of this emacs configuration was inspired by [[https://protesilaos.com/emacs/dotemacs][prot's dotemacs configuration]].

* Getting Started

This org file is used to set up my emacs configuration. The code blocks of this org file
will be executed using =org-babel-tangle=. Thus, to initiate you must use =M-x ^org-babel-tangle= or use the key-binding =C-c C-v t=.

* Dependencies

** Fonts

This emacs configuration, if running the GUI version requires the font type called [[https://github.com/protesilaos/iosevka-comfy][iosevka-comfy]]. I have a copy of the git repo attached as a submodule in the fonts directory of this repository. Make sure that have that font style installed.

* Running Emacs
** In the Command Line 

To run emacs in the command-line/terminal simply use the following command while in your command-line/terminal: =emacs -nw=.

* The early initialization of Emacs (=early-init.el=) 
** The =early-init.el= macro to run code only in a Desktop Environment

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  (defvar jw-emacs-tiling-window-manager-regexp "bspwm\\|herbstluftwm\\|i3"
    "Regular expression to  tiling window managers.
  See definition of `prot-emacs-with-desktop-session'.")

  (defmacro jw-emacs-with-desktop-session (&rest body)
    "Expand BODY if desktop session is not a tiling window manager.
  See `prot-emacs-tiling-window-manager-regexp' for what
  constitutes a matching tiling window manager."
    (declare (indent 0))
    `(when-let ((session (getenv "DESKTOP_SESSION"))
                ((not (string-match-p session jw-emacs-tiling-window-manager-regexp))))
       ,@body))

#+end_src

** The =early-init.el= code to set frame parameters

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

;; Set frame parameters early
(setq initial-frame-alist
      (append '((alpha . (90 . 90))
                (fullscreen . maximized))
              initial-frame-alist))

(setq default-frame-alist
      (append '((alpha . (90 . 90))
                (fullscreen . maximized))
              default-frame-alist))

;; Ensure the current frame is also updated
(add-hook 'window-setup-hook
          (lambda ()
            (set-frame-parameter nil 'alpha '(90 . 90))
            (set-frame-parameter nil 'fullscreen 'maximized)))

#+end_src

** The =early-init.el= basic frame settings

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t ; only for mouse events, which I seldom use
        use-file-dialog nil
        use-short-answers t
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t
        inhibit-startup-echo-area-message user-login-name ; read the docstring
        inhibit-startup-buffer-menu t)

  ;; I do not use those graphical elements by default, but I do enable
  ;; them from time-to-time for testing purposes or to demonstrate
  ;; something.  NEVER tell a beginner to disable any of these.  They
  ;; are helpful.
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

#+end_src
** The =early-init.el= hook to improve Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

Also, turn on =lexical-binding= for the init file!

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  ;; -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

** The =early-init.el= defines general theme related functions

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes
  (defun jw-emacs-theme-gsettings-dark-p ()
    "Return non-nil if gsettings (GNOME) has a dark theme.
  Return nil if the DESKTOP_SESSION is either bspwm or
  herbstluftwm, per the configuration of my dotfiles.  Also check
  the `delight' shell script."
    (jw-emacs-with-desktop-session
      (string-match-p
       "dark"
       (shell-command-to-string "gsettings get org.gnome.desktop.interface color-scheme"))))

  (defun jw-emacs-theme-twm-dark-p ()
    "Return non-nil if my custom setup has a dark theme.
  I place a file in ~/.config/prot-xtwm-active-theme which contains
  a single word describing my system-wide theme.  This is part of
  my dotfiles.  Check my `delight' shell script for more."
    (when-let ((file "~/.config/jw-xtwm-active-theme")
               ((file-exists-p file)))
        (string-match-p
         "dark"
         (with-temp-buffer
           (insert-file-contents file)
           (buffer-string)))))

  (defun jw-emacs-theme-environment-dark-p ()
    "Return non-nil if environment theme is dark."
    (or (jw-emacs-theme-twm-dark-p)
        (jw-emacs-theme-gsettings-dark-p)))

  (defun jw-emacs-re-enable-frame-theme (_frame)
    "Re-enable active theme, if any, upon FRAME creation.
  Add this to `after-make-frame-functions' so that new frames do
  not retain the generic background set by the function
  `prot-emacs-avoid-initial-flash-of-light'."
    (when-let ((theme (car custom-enabled-themes)))
      (enable-theme theme)))

#+end_src
** The =early-init.el= gives a name to the default frame

The following configuration is taken from [[https://protesilaos.com/emacs/dotemacs#h:ad227f7e-b0a7-43f8-91d6-b50db82da9ad][prot's configuration]].

Finally, I like to call my default frame =home=. This is because I use my =beframe= package to group the list of buffers on a per-frame basis ([[https://protesilaos.com/emacs/dotemacs#h:77e4f174-0c86-460d-8a54-47545f922ae9][The prot-emacs-window.el section about beframe]]). The multi-frame arrangement is the best thing I ever did to boost my productivity: bonus points when used in tandem with a tiling window manager.

Naming frames allows you to select them using completion. Emacs can do this (=M-x select-frame-by-name=), though it is not always reliable as it depends on the window manager (it works fine on GNOME, from what I can tell). For minimalist window managers on Linux, something like the =rofi= program can select system windows based on their name.

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  (add-hook 'after-init-hook (lambda () (set-frame-name "home")))

#+end_src

** The =early-init.el= section to add modules and libraries to the Emacs configuration

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  (add-to-list 'load-path (expand-file-name "jw-emacs-modules" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "jw-lisp" user-emacs-directory))

#+end_src
* The main initialization of Emacs (=init.el=)
** The =init.el= conditional to remove display of mode-line

Want to disable to mode-line at the very start and enable it when the mode-line configuration is loaded to make startup look smooth. The mode-line will be added when the mode-line is loaded ([[*The =jw-emacs-modeline.el= to enable the mode-line][The =jw-emacs-modeline.el= to enable the mode-line]]).

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

(setq-default mode-line-format nil)

#+end_src
** The =init.el= setting to =dired= --native

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (require 'dired)

  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map (kbd "(") 'dired-hide-details-mode)
              ;; Uncomment the next line to start with details hidden
              (dired-hide-details-mode 1)
              ))


#+end_src
** The =init.el= settings for packages (=use-package=) --native

[[https://github.com/jwiegley/use-package][use-package]] is a native package built into emacs since =v29.0.0= and is used in this configuration to make it a lot easier to automate the installation and configuration of everything else.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (add-to-list 'package-archives
               '("gnu-devel" . "https://elpa.gnu.org/devel/") :append)

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (setq use-package-always-ensure t)

#+end_src

To debug =use-package= run =emacs --debug-init=.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (if init-file-debug
      (setq use-package-verbose t
            use-package-expand-minimally nil
            use-package-compute-statistics t
            debug-on-error t)
    (setq use-package-verbose nil
          use-package-expand-minimally t))
#+end_src

To remove packages that are not used run =M-x use-package-autoremove=. However, the current code only works for packages that have the =:ensure= | =:vc= | =:init= keywords. 

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (eval-and-compile
    (defvar use-package-selected-packages nil
     "Explicitly installed packages.")

    (define-advice use-package-handler/:ensure
        (:around (fn name-symbol keyword args rest state) select)
      (let ((items (funcall fn name-symbol keyword args rest state)))
        (dolist (ensure args items)
          (let ((package
                 (or (and (eq ensure t) (use-package-as-symbol name-symbol))
                     ensure)))
            (when package
              (when (consp package)
                (setq package (car package)))
              (push `(add-to-list 'use-package-selected-packages ',package) items))))))

    (define-advice use-package-handler/:vc
        (:around (fn name-symbol &rest rest) select)
      (cons `(add-to-list 'use-package-selected-packages ',name-symbol)
            (apply fn name-symbol rest))))

  (define-advice use-package-handler/:init
    (:around (fn name-symbol keyword args rest state) select)
  (let ((items (funcall fn name-symbol keyword args rest state)))
    (dolist (init args items)
      (push `(add-to-list 'use-package-selected-packages ',name-symbol) items))))

  (defun use-package-autoremove ()
  "Autoremove packages not used by use-package."
  (interactive)
  (let ((package-selected-packages use-package-selected-packages))
    (package-autoremove)))

#+end_src

If you get a package not found error and the package exists, then you can try
refreshing the package contents by running =M-x package-refresh-contents=.

** The =init.el= for easy leader key management (=general.el=)

[[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings, especially
in conjunction with Evil modes.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (use-package general
    :ensure t
    :config
    (general-create-definer jw/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src

** The =init.el= essential key configurations
*** The =init.el= essential key configuration for =esc=

Bind the quit prompting function to the =esc= key.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** The =init.el= essential key configuration for indentation

Use spaces instead of tabs for indentation

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (setq-default indent-tabs-mode nil)

#+end_src

*** The =init.el= essential key configuration for user interface toggles

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (jw/leader-key-def
    "t"  '(:ignore t :which-key "toggles")
    "tw" 'whitespace-mode
    )

#+end_src
*** The =init.el= essential key configuration for =evil-mode=

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

#+end_src

** The =init.el= setting to always start with the *scratch* buffer

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; Always start with *scratch*
  (setq initial-buffer-choice t)

#+end_src
** The =init.el= for additional configurations for =emacs=

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :init
    ;; TAB cycle if there are only few candidates
    ;; (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    ;; (setq tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (setq text-mode-ispell-word-completion nil)

    ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
    ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
    ;; setting is useful beyond Corfu.
    (setq read-extended-command-predicate #'command-completion-default-include-p))

#+end_src

** The =init.el= user options

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; taken from prot's config
  ;; For those who use my dotfiles and need an easy way to write their
  ;; own extras on top of what I already load: search below for the files
  ;; prot-emacs-pre-custom.el and prot-emacs-post-custom.el
  (defgroup jw-emacs nil
    "User options for my dotemacs.
  These produce the expected results only when set in a file called
  prot-emacs-pre-custom.el.  This file must be in the same
  directory as the init.el."
    :group 'file)

#+end_src
** The =init.el= user option to enable which-key

The =which-key= package provides hints for keys that complete the currently incomplete sequence. Here we determine whether to load the module or not. I personally never rely on =which-key= even if I enable its mode. If I ever need to review which key bindings are available I will either type =C-h= to complete a key sequence (produces a Help buffer with relevant keys) or I will do =C-h m= (=M-x describe-mode= to get information about the current major mode).

Remember to read how these options come into effect ([[https://protesilaos.com/emacs/dotemacs#h:5a41861f-4c38-45ac-8da2-51d77c0b4a73][The init.el user options]]).

Also check the [[https://protesilaos.com/emacs/dotemacs#h:ddb1070d-2f91-4224-ad43-ef03f038f787][prot-emacs-which-key.el module]].

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (defcustom jw-emacs-load-which-key nil
    "When non-nil, display key binding hints after a short delay.
  This user option must be set in the `prot-emacs-pre-custom.el'
  file.  If that file exists in the Emacs directory, it is loaded
  before all other modules of my setup."
    :group 'jw-emacs
    :type 'boolean)

#+end_src

** The =init.el= user option to load a theme family

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes


  (defcustom jw-emacs-load-theme-family 'modus
    "Set of themes to load.
  Valid values are the symbols `ef', `modus', and `standard', which
  reference the `ef-themes', `modus-themes', and `standard-themes',
  respectively.

  A nil value does not load any of the above (use Emacs without a
  theme).

  This user option must be set in the `jw-emacs-pre-custom.el'
  file.  If that file exists in the Emacs directory, it is loaded
  before all other modules of my setup."
    :group 'jw-emacs
    :type '(choice :tag "Set of themes to load" :value modus
                   (const :tag "The `ef-themes' module" ef)
                   (const :tag "The `modus-themes' module" modus)
                   (const :tag "The `standard-themes' module" standard)
                   (const :tag "Do not load a theme module" nil)))

#+end_src
** The =init.el= final part to load the individual modules

Load the =jw-emacs-modules=.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes
  (load (locate-user-emacs-file "jw-emacs-pre-custom.el") :no-error :no-message)
  (require 'jw-emacs-theme)
  (require 'jw-emacs-essentials)
  (require 'jw-emacs-modeline)
  (require 'jw-emacs-completion)
  (require 'jw-emacs-org)
  (require 'jw-emacs-git)
  (require 'jw-emacs-dired)
  (require 'jw-emacs-information-management)
  (require 'jw-emacs-development)
  (require 'jw-emacs-langs)

#+end_src

Load =jw-lisp=.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (require 'jw-copy)

#+end_src
* The modules of my Emacs configuration (=jw-emacs-modules/=)
** The =jw-emacs-theme.el= module
*** The =jw-emacs-theme.el= section to load a theme (=jw-emacs-load-theme-family=)

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;; Theme setup and related

  ;;;; Load the desired theme module
  ;; These all reference my packages: `modus-themes', `ef-themes',
  ;; `standard-themes'.
  (when jw-emacs-load-theme-family
    (require
     (pcase jw-emacs-load-theme-family
       ('ef 'jw-emacs-ef-themes)
       ('modus 'jw-emacs-modus-themes)
       ('standard 'jw-emacs-standard-themes))))

#+end_src

**** The =jw-emacs-modus-themes.el= module -- native

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modus-themes.el" :mkdirp yes

  ;;; The Modus themes

  ;; The themes are highly customisable.  Read the manual:
  ;; <https://protesilaos.com/emacs/modus-themes>.
  (use-package modus-themes
    :ensure t
    :demand t
    :bind (("<f5>" . modus-themes-toggle)
           ("C-<f5>" . modus-themes-select))
    :config
    (setq modus-themes-custom-auto-reload nil
          modus-themes-to-toggle '(modus-operandi modus-vivendi)
          ;; modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
          ;; modus-themes-to-toggle '(modus-operandi-deuteranopia modus-vivendi-deuteranopia)
          ;; modus-themes-to-toggle '(modus-operandi-tritanopia modus-vivendi-tritanopia)
          modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui t
          modus-themes-italic-constructs t
          modus-themes-bold-constructs nil
          modus-themes-completions '((t . (extrabold)))
          modus-themes-prompts '(extrabold)
          modus-themes-headings
          '((agenda-structure . (variable-pitch light 2.2))
            (agenda-date . (variable-pitch regular 1.3))
            (t . (regular 1.15))))

    (setq modus-themes-common-palette-overrides nil))
    (if (jw-emacs-theme-environment-dark-p)
      (modus-themes-load-theme (cadr modus-themes-to-toggle))
      (modus-themes-load-theme (car modus-themes-to-toggle)))
   (provide 'jw-emacs-modus-themes)

#+end_src

**** The =jw-emacs-ef-themes.el= module

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-ef-themes.el" :mkdirp yes

  ;;; The Ef (εὖ) themes

  ;; The themes are customisable.  Read the manual:
  ;; <https://protesilaos.com/emacs/ef-themes>.
  (use-package ef-themes
    :ensure t
    :demand t
    :bind ("<f5>" . ef-themes-select)
    :config
    (setq ef-themes-variable-pitch-ui t
          ef-themes-mixed-fonts t
          ef-themes-headings ; read the manual's entry of the doc string
          '((0 . (variable-pitch light 1.9))
            (1 . (variable-pitch light 1.8))
            (2 . (variable-pitch regular 1.7))
            (3 . (variable-pitch regular 1.6))
            (4 . (variable-pitch regular 1.5))
            (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
            (6 . (variable-pitch 1.3))
            (7 . (variable-pitch 1.2))
            (agenda-date . (semilight 1.5))
            (agenda-structure . (variable-pitch light 1.9))
            (t . (variable-pitch 1.1))))

    ;; The `ef-themes' provide lots of themes.  I want to pick one at
    ;; random when I start Emacs: the `ef-themes-load-random' does just
    ;; that (it can be called interactively as well).  I just check with
    ;; my desktop environment to determine if the choice should be about
    ;; a light or a dark theme.  Those functions are in my init.el.
    (if (jw-emacs-theme-environment-dark-p)
        (ef-themes-load-random 'dark)
      (ef-themes-load-random 'light)))
(provide 'jw-emacs-ef-themes)
#+end_src
*** The =jw-emacs-theme.el= section for =pulsar=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;;; Pulsar
  ;; Read the pulsar manual: <https://protesilaos.com/emacs/pulsar>.
  (use-package pulsar
    :ensure t
    :config
    (setopt pulsar-pulse t
            pulsar-delay 0.055
            pulsar-iterations 10
            pulsar-face 'pulsar-magenta
            pulsar-highlight-face 'pulsar-cyan)

    (pulsar-global-mode 1)
    :hook
    ;; There are convenience functions/commands which pulse the line using
    ;; a specific colour: `pulsar-pulse-line-red' is one of them.
    ((next-error . (pulsar-pulse-line-red pulsar-recenter-top pulsar-reveal-entry))
     (minibuffer-setup . pulsar-pulse-line-red))
    :bind
    ;; pulsar does not define any key bindings.  This is just my personal
    ;; preference.  Remember to read the manual on the matter.  Evaluate:
    ;;
    ;; (info "(elisp) Key Binding Conventions")
    (("C-x l" . pulsar-pulse-line) ; override `count-lines-page'
     ("C-x L" . pulsar-highlight-dwim))) ; or use `pulsar-highlight-line'
#+end_src

*** The =jw-emacs-theme.el= section for =lin=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;;; Lin
  ;; Read the lin manual: <https://protesilaos.com/emacs/lin>.
  (use-package lin
    :ensure t
    :hook (after-init . lin-global-mode) ; applies to all `lin-mode-hooks'
    :config
    ;; You can use this to live update the face:
    ;;
    ;; (customize-set-variable 'lin-face 'lin-green)
    ;;
    ;; Or `setopt' on Emacs 29: (setopt lin-face 'lin-yellow)
    ;;
    ;; I still prefer `setq' for consistency.
    (setq lin-face 'lin-magenta))

#+end_src
*** The =jw-emacs-theme.el= section for =spacious-padding=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;;; Increase padding of windows/frames
  ;; Yet another one of my packages:
  ;; <https://protesilaos.com/codelog/2023-06-03-emacs-spacious-padding/>.
  (use-package spacious-padding
    :ensure t
    :if (display-graphic-p)
    :hook (after-init . spacious-padding-mode)
    :bind ("<f8>" . spacious-padding-mode)
    :init
    ;; These are the defaults, but I keep it here for visiibility.
    (setq spacious-padding-widths
          '( :internal-border-width 15
             :header-line-width 4
             :mode-line-width 6
             :tab-width 4
             :right-divider-width 1
             :scroll-bar-width 8
             :left-fringe-width 20
             :right-fringe-width 20))

    ;; Read the doc string of `spacious-padding-subtle-mode-line' as
    ;; it is very flexible.
    (setq spacious-padding-subtle-mode-line
          `( :mode-line-active ,(if (or (eq jw-emacs-load-theme-family 'modus)
                                        (eq jw-emacs-load-theme-family 'standard))
                                    'default
                                  'help-key-binding)
             :mode-line-inactive window-divider)))

#+end_src
*** The =jw-emacs-theme.el= section for =cursory=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;; Cursor appearance (cursory)
  ;; Read the manual: <https://protesilaos.com/emacs/cursory>.
  (use-package cursory
    :ensure t
    :demand t
    :if (display-graphic-p)
    :config
    (setq cursory-presets
          '((box
             :blink-cursor-interval 1.2)
            (box-no-blink
             :blink-cursor-mode -1)
            (bar
             :cursor-type (bar . 2)
             :blink-cursor-interval 0.8)
            (bar-no-other-window
             :inherit bar
             :cursor-in-non-selected-windows nil)
            (bar-no-blink
             :cursor-type (bar . 2)
             :blink-cursor-mode -1)
            (underscore
             :cursor-type (hbar . 3)
             :blink-cursor-blinks 50)
            (underscore-thin-other-window
             :inherit underscore
             :cursor-in-non-selected-windows (hbar . 1))
            (underscore-thick
             :cursor-type (hbar . 8)
             :blink-cursor-interval 0.3
             :blink-cursor-blinks 50
             :cursor-in-non-selected-windows (hbar . 3))
            (underscore-thick-no-blink
             :blink-cursor-mode -1
             :cursor-type (hbar . 8)
             :cursor-in-non-selected-windows (hbar . 3))
            (t ; the default values
             :cursor-type box
             :cursor-in-non-selected-windows hollow
             :blink-cursor-mode 1
             :blink-cursor-blinks 10
             :blink-cursor-interval 0.2
             :blink-cursor-delay 0.2)))

    ;; I am using the default values of `cursory-latest-state-file'.

    ;; Set last preset or fall back to desired style from `cursory-presets'.
    (cursory-set-preset (or (cursory-restore-latest-preset) 'box))
    :hook
    ;; The other side of `cursory-restore-latest-preset'.
    (kill-emacs . cursory-store-latest-preset)
    :bind
    ;; We have to use the "point" mnemonic, because C-c c is often the
    ;; suggested binding for `org-capture' and is the one I use as well.
    ("C-c p" . cursory-set-preset))
#+end_src

*** The =jw-emacs-theme.el= section for =theme-buffet=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

   ;;;; Theme buffet
  (use-package theme-buffet
    :ensure t
    :after (:any modus-themes ef-themes)
    :defer 1
    :config
    (let ((modus-themes-p (featurep 'modus-themes))
          (ef-themes-p (featurep 'ef-themes)))
      (setq theme-buffet-menu 'end-user)
      (setq theme-buffet-end-user
            (cond
             ((and modus-themes-p ef-themes-p)
              '( :night     (modus-vivendi ef-dark ef-winter ef-autumn ef-night ef-duo-dark ef-symbiosis)
                 :morning   (modus-operandi ef-light ef-cyprus ef-spring ef-frost ef-duo-light)
                 :afternoon (modus-operandi-tinted ef-arbutus ef-day ef-kassio ef-summer ef-elea-light ef-maris-light ef-melissa-light ef-trio-light ef-reverie)
                 :evening   (modus-vivendi-tinted ef-rosa ef-elea-dark ef-maris-dark ef-melissa-dark ef-trio-dark ef-dream)))
             (ef-themes-p
              '( :night     (ef-dark ef-winter ef-autumn ef-night ef-duo-dark ef-symbiosis)
                 :morning   (ef-light ef-cyprus ef-spring ef-frost ef-duo-light)
                 :afternoon (ef-arbutus ef-day ef-kassio ef-summer ef-elea-light ef-maris-light ef-melissa-light ef-trio-light ef-reverie)
                 :evening   (ef-rosa ef-elea-dark ef-maris-dark ef-melissa-dark ef-trio-dark ef-dream)))
             (modus-themes-p
              '( :night     (modus-vivendi modus-vivendi-tinted modus-vivendi-tritanopia modus-vivendi-deuteranopia)
                 :morning   (modus-operandi modus-operandi-tinted modus-operandi-tritanopia modus-operandi-deuteranopia)
                 :afternoon (modus-operandi modus-operandi-tinted modus-operandi-tritanopia modus-operandi-deuteranopia)
                 :evening   (modus-vivendi modus-vivendi-tinted modus-vivendi-tritanopia modus-vivendi-deuteranopia)))))

      (when (or modus-themes-p ef-themes-p)
        (theme-buffet-timer-hours 1))))

#+end_src
*** The =jw-emacs-theme.el= section for =fontaine=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;;; Fontaine (font configurations)
  ;; Read the manual: <https://protesilaos.com/emacs/fontaine>
  (use-package fontaine
    :ensure t
    :if (display-graphic-p)
    :hook
    ;; Persist the latest font preset when closing/starting Emacs and
    ;; while switching between themes.
    ((after-init . fontaine-mode)
     (after-init . (lambda ()
                          ;; Set last preset or fall back to desired style from `fontaine-presets'.
                          (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular)))))
    :bind ("C-c f" . fontaine-set-preset)
    :config
    ;; This is defined in Emacs C code: it belongs to font settings.
    (setq x-underline-at-descent-line nil)

    ;; And this is for Emacs28.
    (setq-default text-scale-remap-header-line t)

    ;; This is the default value.  Just including it here for
    ;; completeness.
    (setq fontaine-latest-state-file (locate-user-emacs-file "fontaine-latest-state.eld"))

    (setq fontaine-presets
          '((small
             :default-family "Iosevka Comfy Motion"
             :default-height 80
             :variable-pitch-family "Iosevka Comfy Duo")
            (regular) ; like this it uses all the fallback values and is named `regular'
            (medium
             :default-weight semilight
             :default-height 115
             :bold-weight extrabold)
            (large
             :inherit medium
             :default-height 150)
            (live-stream
             :default-family "Iosevka Comfy Wide Motion"
             :default-height 150
             :default-weight medium
             :fixed-pitch-family "Iosevka Comfy Wide Motion"
             :variable-pitch-family "Iosevka Comfy Wide Duo"
             :bold-weight extrabold)
            (presentation
             :default-height 180)
            (t
             ;; I keep all properties for didactic purposes, but most can be
             ;; omitted.  See the fontaine manual for the technicalities:
             ;; <https://protesilaos.com/emacs/fontaine>.
             :default-family "Iosevka Comfy"
             :default-weight regular
             :default-slant normal
             :default-height 180

             :fixed-pitch-family "Iosevka Comfy"
             :fixed-pitch-weight nil
             :fixed-pitch-slant nil
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil
             :fixed-pitch-serif-weight nil
             :fixed-pitch-serif-slant nil
             :fixed-pitch-serif-height 1.0

             :variable-pitch-family "Iosevka Comfy Motion Duo"
             :variable-pitch-weight nil
             :variable-pitch-slant nil
             :variable-pitch-height 1.0

             :mode-line-active-family nil
             :mode-line-active-weight nil
             :mode-line-active-slant nil
             :mode-line-active-height 1.0

             :mode-line-inactive-family nil
             :mode-line-inactive-weight nil
             :mode-line-inactive-slant nil
             :mode-line-inactive-height 1.0

             :header-line-family nil
             :header-line-weight nil
             :header-line-slant nil
             :header-line-height 1.0

             :line-number-family nil
             :line-number-weight nil
             :line-number-slant nil
             :line-number-height 1.0

             :tab-bar-family nil
             :tab-bar-weight nil
             :tab-bar-slant nil
             :tab-bar-height 1.0

             :tab-line-family nil
             :tab-line-weight nil
             :tab-line-slant nil
             :tab-line-height 1.0

             :bold-family nil
             :bold-weight bold
             :bold-slant nil
             :bold-height 1.0

             :italic-family nil
             :italic-weight nil
             :italic-slant italic
             :italic-height 1.0

             :line-spacing nil)))

    (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))


#+end_src
*** The =jw-emacs-theme.el= section for font resizing and =variable-pitch-mode= --native

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

    ;;;;; `variable-pitch-mode' setup
  (use-package face-remap
    :ensure nil
    :functions jw/enable-variable-pitch
    :bind ( :map ctl-x-x-map
            ("v" . variable-pitch-mode))
    :hook ((text-mode notmuch-show-mode elfeed-show-mode) . jw/enable-variable-pitch)
    :config
    ;; NOTE 2022-11-20: This may not cover every case, though it works
    ;; fine in my workflow.  I am still undecided by EWW.
    (defun jw/enable-variable-pitch ()
      (unless (derived-mode-p 'mhtml-mode 'nxml-mode 'yaml-mode)
        (variable-pitch-mode 1)))
  ;;;;; Resize keys with global effect
    :bind
    ;; Emacs 29 introduces commands that resize the font across all
    ;; buffers (including the minibuffer), which is what I want, as
    ;; opposed to doing it only in the current buffer.  The keys are the
    ;; same as the defaults.
    (("C-x C-=" . global-text-scale-adjust)
     ("C-x C-+" . global-text-scale-adjust)
     ("C-x C-0" . global-text-scale-adjust)))

#+end_src

*** The =jw-emacs-theme.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  (provide 'jw-emacs-theme)

#+end_src

** The =jw-emacs-essentials.el= module
*** The =jw-emacs-essentials.el= section for gui configurations

Set up the visible bell to be on instead of the beeping. For macos it is best to leave commented below to not have the visual bell because it is distracting.
#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el"

  ;; (setq visible-bell t)

#+end_src


Enable line numbers globally, but not in the following modes: org, term, shell, and eshell.

In addition to line numbers, the column number will also be displayed. 

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el"

  ;; Enable column numbers
  (column-number-mode)

  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Since =fill-paragraph= wraps =fill-column=, we adjust the size of the =fill-column= variable.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el"

  (setq-default fill-column 80)

#+end_src

*** The =jw-emacs-essentials.el= section for =helpful.el=

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el" :mkdirp yes

  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

#+end_src

*** The =jw-emacs-essentials.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el" :mkdirp yes

  (provide 'jw-emacs-essentials)

#+end_src

** The =jw-emacs-modeline.el= module
*** The =jw-emacs-modeline.el= to enable the mode-line
The mode-line was disabled earlier ([[*The =init.el= conditional to remove display of mode-line][The =init.el= conditional to remove display of mode-line]]) so that the startup UI would look smooth

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (setq-default mode-line-format (default-value 'mode-line-format))

#+end_src

*** The =jw-emacs-modeline.el= basic user interface configuration

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)

#+end_src

*** The =jw-emacs-modeline.el= customization with =doom-modeline=

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

If you are running in the =macos= terminal, then you have to make sure that you set the font to =Droid Sans Mono Nerd Font Complete 18=. You can do this by the following steps:

- Navigate to =Settings=
- Navigate to =Profiles= tab
- Navigate to =Text= subtab
- Under the =Font= menu click on =Change=
- Select the appropriate font


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src


=doom-modeline= icons rely on =nerd-icons=. Thus, you must install the =nerd-icons= if you want to use the icons on the modeline.

IMPORTANT: must run the following command — =Mx - nerd-icons-install-fonts= for the icons to populate. See the github issue here: [[https://github.com/doomemacs/doomemacs/issues/7368#issuecomment-1689292109][Doom Emacs Issue #7368]]

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )

#+end_src


To turn off icons uncomment the following:

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  ;; (setq doom-modeline-icon nil)

#+end_src


The following contains configurations of the =doom-modeline=. All the configurations here use the =setq=.


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count t)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

#+end_src


Display the virtual environment version.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (setq doom-modeline-env-version t)

#+end_src

*** The =jw-emacs-modeline.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (provide 'jw-emacs-modeline)

#+end_src

** The =jw-emacs-completion.el= module
*** The =jw-emacs-completion.el= section for preserving minibuffer history (=savehist.el=)

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))

    ;; Individual history elements can be configured separately
    ;;(put 'minibuffer-history 'history-length 25)
    ;;(put 'evil-ex-history 'history-length 50)
    ;;(put 'kill-ring 'history-length 25))

#+end_src

*** The =jw-emacs-completion.el= section for completions (=vertico.el=)

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (defun jw/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
        (delete-word (- arg))))

  (use-package vertico
    :ensure t
    :bind (:map vertico-map
           ("C-j" . vertico-next)
           ("C-k" . vertico-previous)
           ("C-f" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . jw/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

#+end_src
*** The =jw-emacs-completion.el= section for completions in region (=corfu.el=)

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.8)
    (corfu-popinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert) ; insert previewed candidate
    (corfu-preselect 'prompt)
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
    :bind (:map corfu-map
         ("C-j" . corfu-next)
         ("C-k" . corfu-previous)
         ("C-f" . corfu-insert))
    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

#+end_src
*** The =jw-emacs-completion.el= section for completions in region on terminal

Since =corfu.el= does not support running emacs in the terminal, I will just stick with =company.el= instead of =corfu-terminal=.

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (unless (display-graphic-p)
      (progn
        ;; Configuration for GUI mode
        (use-package company
          :after eglot
          :hook (eglot--managed-mode . company-mode)
          :bind (:map company-active-map
                 ("<tab>" . company-complete-selection))
                (:map eglot-mode-map
                 ("<tab>" . company-indent-or-complete-common))
          :custom
          (company-minimum-prefix-length 1)
          (company-idle-delay 0.0))
      
        (use-package company-box
          :hook (company-mode . company-box-mode)))
    ;; Configuration for terminal mode (optional)
    ;; Add your terminal mode specific configuration here
    )

#+end_src

*** The =jw-emacs-completion.el= section for additional completions in region (=cape.el=)

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev))

#+end_src

*** The =jw-emacs-completion.el= section for candidate filtering (=orderless.el=)

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

#+end_src

*** The =jw-emacs-completion.el= section for completion annotations (=marginalia.el=)

Marginalia provides helpful annotations for various types of minibuffer completions. You can think of it as a replacement of =ivy-rich=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

*** The =jw-emacs-completion.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (provide 'jw-emacs-completion)

#+end_src

** The =jw-emacs-org.el= module
*** The =jw-emacs-org.el= section for org-mode setup --native

Set up Org Mode with a baseline configuration. The following sections will add more things to it.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (defun jw/org-mode-setup ()
    (org-indent-mode) ;; auto-indentation for headings
    (variable-pitch-mode 1) ;; cause fonts to vary by proportionality
    (visual-line-mode 1)) ;; wrap the text so that it does not go out of view

  (use-package org
    :hook (org-mode . jw/org-mode-setup)
    :config
    (setq org-ellipsis " ▾") ;; when org headings closed down arrow instead of ellipsis
    )


#+end_src

*** The =jw-emacs-org.el= section for org-links

As recommended by the official =org= manual to have these keys bound.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c C-l") 'org-insert-link)

#+end_src
*** The =jw-emacs-org.el= section for bullets

Customize the heading bullets to make it consistent and nicer.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** The =jw-emacs-org.el= section for inline images


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (setq org-image-actual-width nil)
  (setq org-startup-with-inline-images t)
  (add-hook 'org-mode-hook 'org-display-inline-images)

#+end_src

*** The =jw-emacs-org.el= section for =org-transclusion=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (unless (package-installed-p 'org-transclusion)
    (package-refresh-contents)
    (package-install 'org-transclusion))

  (require 'org-transclusion)

#+end_src

*** The =jw-emacs-org.el= section for structured templates (=org-tempo=)

These structured templates are used to auto generate code blocks for org mode. In order
to use the template simply type =<= followed by the abbreviation of the language and
hit the =TAB= button. For example, the python snippit would be =<py TAB=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

*** The =jw-emacs-org.el= section for auto-tangle

This snippet adds a hook to =org-mode= buffers so that =jw/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun jw/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jw/org-babel-tangle-config)))

#+end_src

*** The =jw-emacs-org.el= section for executing code (=org-babel=)

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

*** The =jw-emacs-org.el= section for text display (=visual-fill-column.el=)

=visual-fill-column= will create a document looking display with the extra padding on the left and on the right.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (defun jw/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . jw/org-mode-visual-fill))

#+end_src
*** The =jw-emacs-org.el= section for org-latex

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
                 "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("org-plain-no-section-numbering-latex"
                 "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                 ("\\section*{%s}" . "\\section*{%s}")
                 ("\\subsection*{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection*{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph*{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph*{%s}" . "\\subparagraph*{%s}"))))

#+end_src

*** The =jw-emacs-org.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (provide 'jw-emacs-org)

#+end_src

** The =jw-emacs-git.el= module
*** The =jw-emacs-git.el= section for =magit.el=

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-git.el" :mkdirp yes

  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge)

#+end_src


Sign git commits with ssh rather than gpg. Not the optimal solution, but the solution was found to work on this  issue on magit github repo: [[https://github.com/magit/magit/discussions/5046][magit ssh signing discussion]]

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-git.el" :mkdirp yes

  (defun magit-read-gpg-signing-key (prompt &optional initial-input history)
    "")

#+end_src

*** The =jw-emacs-git.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-git.el" :mkdirp yes

  (provide 'jw-emacs-git)

#+end_src

** The =jw-emacs-dired.el= module
*** The =jw-emacs-dired.el= section for dired display

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-dired.el" :mkdirp yes

  (setq dired-listing-switches "-alD")

#+end_src

*** The =jw-emacs-dired.el= section for gnu =gls=

For macos, make sure to have =coreutils= installed. To install run, =brew install coreutils=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-dired.el" :mkdirp yes

  (setq insert-directory-program "gls" 
       dired-use-ls-dired t)

#+end_src

*** The =jw-emacs-dired.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-dired.el" :mkdirp yes

  (provide 'jw-emacs-dired)

#+end_src

** The =jw-emacs-information-management.el= module
*** The =jw-emacs-information-management.el= section for =denote=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (use-package denote
                   :ensure t)

  (setq denote-directory (expand-file-name "~/Otzar/Gnosis/"))
  (setq denote-save-buffer-after-creation nil)

#+end_src


Enable the denote dired mode for all files so that the components can easily be seen.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (add-hook 'dired-mode-hook #'denote-dired-mode)

#+end_src

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (setq denote-known-keywords '("theology" "philosophy" "politics" "journal" "analysis" "linguistics"))
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)

#+end_src

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (setq denote-file-type nil) ; Org is the default, set others here
  (setq denote-prompts '(subdirectory title keywords))
  (setq denote-excluded-directories-regexp nil)
  (setq denote-excluded-keywords-regexp nil)
  (setq denote-rename-no-confirm nil) ; Set to t if you are familiar with `denote-rename-file'

  ;; Pick dates, where relevant, with Org's advanced interface:
  (setq denote-date-prompt-use-org-read-date t)
  ;; Read this manual for how to specify `denote-templates'.  We do not
  ;; include an example here to avoid potential confusion.
  (setq denote-date-format nil) ; read doc string

  ;; By default, we do not show the context of links.  We just display
  ;; file names.  This provides a more informative view.
  (setq denote-backlinks-show-context t)

  ;; Also see `denote-link-backlinks-display-buffer-action' which is a bit
  ;; advanced.

  ;; If you use Markdown or plain text files (Org renders links as buttons
  ;; right away)
  (add-hook 'find-file-hook #'denote-link-buttonize-buffer)

  (with-eval-after-load 'org-capture
  (setq denote-org-capture-specifiers "%l\n%i\n%?")
  (add-to-list 'org-capture-templates
               '("n" "New note (with denote.el)" plain
                 (file denote-last-path)
                 #'denote-org-capture
                 :no-save t
                 :immediate-finish nil
                 :kill-buffer t
                 :jump-to-captured t)))

  ;; Also check the commands `denote-link-after-creating',
  ;; `denote-link-or-create'.  You may want to bind them to keys as well.


  ;; If you want to have Denote commands available via a right click
  ;; context menu, use the following and then enable
  ;; `context-menu-mode'.
  (add-hook 'context-menu-functions #'denote-context-menu)

#+end_src

*** The =jw-emacs-information-management.el= section for =ledger-mode=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (use-package ledger-mode
    :ensure t
    :mode (
           "\\.ledger\\'")
    :custom (ledger-clear-whole-transactions t))


#+end_src

*** The =jw-emacs-information-management.el= section for clean directories

Move the =#<FILE>#= to a temporary directory instead of root directory.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  (setq lock-file-name-transforms
      '(("\\`/.*/\\([^/]+\\)\\'" "/var/tmp/\\1" t)))

#+end_src

*** The =jw-emacs-information-management.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (provide 'jw-emacs-information-management)

#+end_src

** The =jw-emacs-development.el= module
*** The =jw-emacs-development.el= section for =project.el=  --native

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (require 'project)

#+end_src


Set the project paths, but currently the code below only works for =emacs 30+=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes
   (defun jw/project-prompter ()
        (read-file-name "Select a project folder:"
                        "~/Projects/Code/"
                        nil
                        nil
                        nil
                        #'file-directory-p))
   (setq project-prompter #'jw/project-prompter)

#+end_src

*** The =jw-emacs-development.el= section for visualizing parent delimiters --native

=show-paren-mode= allows one to see matching pairs of parentheses and other characters. When point is on the opening character of one of the paired characters, the other is highlighted. When the point is after the closing character of one of the paired characters, the other is highlighted. 

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (show-paren-mode 1)

#+end_src

*** The =jw-emacs-development.el= section for visualizing all delimiters 

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** The =jw-emacs-development.el= section for pairing delimiters (=electric-pair-mode=) --native

=electric-pair-mode= will auto pair delimiters for you. One issue with the auto pairing is the =<= character in =org-mode=. The following hook to the enabling of =electric-pair-mode= aims to solve the issue when in =org-mode=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (electric-pair-mode t)

  (add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

#+end_src

*** The =jw-emacs-development.el= section for pairing delimiters (=evil-surround=)

=evil-surround= emulates [[https://github.com/tpope/vim-surround][surround.vim]]. For usage instructions visit [[https://github.com/emacs-evil/evil-surround][evil-surround]]

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

#+end_src

*** The =jw-emacs-development.el= section for logging keys (=command-log-mode=)

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame. Great for live streams and screencasts!


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (use-package command-log-mode)

#+end_src

To activate =command-log-mode= you must first run =M-x global-command-log-mode= to have =command-log-mode= in every buffer and then run =M-x clm/toggle-command-log-buffer= to have the buffer be displayed.
*** The =jw-emacs-development.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (provide 'jw-emacs-development)

#+end_src

** The =jw-emacs-which-key.el= module

There is a user option in my setup to load this module ([[https://protesilaos.com/emacs/dotemacs#h:24324854-1f8c-4d8b-aa7c-291de968cbf4][The init.el option to enable which-key]]).

When the =which-key-mode= is enabled, any incomplete key sequence will produce a popup at the lower part of the Emacs frame showing keys that complete the current sequence together with the name of the command they are invoking.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-which-key.el" :mkdirp yes

  (use-package which-key
    :ensure t
    :hook (after-init . which-key-mode)
    :config
    (setq which-key-separator "  ")
    (setq which-key-prefix-prefix "... ")
    (setq which-key-max-display-columns 3)
    (setq which-key-idle-delay 1.5)
    (setq which-key-idle-secondary-delay 0.25)
    (setq which-key-add-column-padding 1)
    (setq which-key-max-description-length 40))

  (provide 'jw-emacs-which-key)

#+end_src
** The =jw-emacs-langs.el= module

*** The =jw-emacs-langs.el= section for language server configuration (=eglot=) --native

Undo the Eglot modifications of =completion-category-defaults=.
#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (with-eval-after-load 'eglot
     (setq completion-category-defaults nil))

#+end_src

*** The =jw-emacs-langs.el= section for =python= support

Configuring pythone envs with =conda=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

    (unless (package-installed-p 'conda)
      (package-refresh-contents)
      (package-install 'conda))

    (require 'conda)
    (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
    (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
      (conda-env-autoactivate-mode t)


#+end_src

Define =jw/find-python-langserver=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (defun jw/find-pyright-langserver ()
    (or (executable-find "pyright-langserver")
        (expand-file-name "~/miniconda3/bin/pyright-langserver")))

#+end_src

Python formatter configuration.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (use-package python-black
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim))

#+end_src


*** The =jw-emacs-langs.el= section for =rust= support

Download =rust-mode=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (unless (package-installed-p 'rust-mode)
    (package-refresh-contents)
    (package-install 'rust-mode))

#+end_src

Setting up =rust-mode=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (require 'rust-mode)
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

#+end_src

Custom function to find rust analyzer.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (defun jw/find-rust-analyzer ()
    (or (executable-find "rust-analyzer")
        (expand-file-name "~/.cargo/bin/rust-analyzer")))

#+end_src

*** The =jw-emacs-langs.el= auto start =eglot= based on lang

Add to =eglot= server list and setup hook after eglot is loaded.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

      (with-eval-after-load 'eglot
        (add-to-list 'eglot-server-programs
                     `(python-mode . (,(jw/find-pyright-langserver) "--stdio")))
        (add-to-list 'eglot-server-programs
                     `(rust-mode . (,(jw/find-rust-analyzer))))
        )

#+end_src

Function to start eglot.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (defun jw/maybe-start-eglot ()
    (when (or (derived-mode-p 'python-mode)
              (derived-mode-p 'rust-mode))
      (eglot-ensure)))

#+end_src

Add the hook to auto start =eglot= depending on configured language.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (add-hook 'python-mode-hook #'jw/maybe-start-eglot)
  (add-hook 'rust-mode-hook #'jw/maybe-start-eglot)

#+end_src

*** The =jw-emacs-langs.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (provide 'jw-emacs-langs)

#+end_src

* The custom libraries of my Emacs configuration (=jw-lisp/=)
** The =jw-copy.el= library

*** The =jw-copy.el= for copying file path

#+begin_src emacs-lisp :tangle ".emacs.d/jw-lisp/jw-copy.el" :mkdirp yes
  (defun jw-dired-get-file-path ()
    "Get the full path of the file at point in Dired mode and display it in the minibuffer."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (message file)
      (kill-new file)))

  (define-key dired-mode-map (kbd "C-c p") 'jw-dired-get-file-path)

#+end_src

*** The =jw-copy.el= for copying a file

#+begin_src emacs-lisp :tangle ".emacs.d/jw-lisp/jw-copy.el" :mkdirp yes

  (defun jw-copy-file (source-file destination-file)
    "Copy a file from SOURCE-FILE to DESTINATION-FILE."
    (interactive "FSource file: \nFDestination file: ")
    (if (file-exists-p source-file)
        (let ((dest-dir (file-name-directory destination-file)))
          (if (file-exists-p dest-dir)
              (if (not (file-exists-p destination-file))
                  (progn
                    (copy-file source-file destination-file)
                    (message "File copied successfully."))
                (message "Destination file already exists. Choose another destination."))
            (message "Destination directory does not exist.")))
      (message "Source file does not exist.")))

#+end_src

*** The =jw-copy.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-lisp/jw-copy.el" :mkdirp yes

  (provide 'jw-copy)

#+end_src

* The archive of deprecated Emacs Configurations (=archive/emacs/=)

The following code consists of legacy code that is no longer used in this emacs configuration. However, it is recommended to keep a history of the previous configurations that I used for packages no longer used as references, which on rare occasion be reinstated.

** =org-roam.el= Configurations

#+begin_src emacs-lisp :tangle "archive/emacs/org-roam.el" :mkdirp yes

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/OrgRoamTest/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    If using org-roam-protocol
    (require 'org-roam-protocol))

#+end_src

Code taken and adjusted for my usecase from [[https://www.reddit.com/r/emacs/comments/135dhh5/code_snippet_to_switch_between_multiple/][@SnooPets20's post.]]

The idea of this switching is to maximize the utility of =org-roam=. In some cases, especially when learning new things, using the *Zettlekasten* method would be ideal as it is devoid of hierarchical structure, thus allowing pure linkages that are not tainted with biases or influencing on how it is perceived by the framework in which it resides. However, for other things it may be more useful to integrate everything in a more hierarchical fashion and create links between different hierarchies.

In order to maintain these various usecases, the content of each should be stored outside the =org-roam= directory (to avoid duplication). 

#+begin_src emacs-lisp :tangle "archive/emacs/org-roam.el" :mkdirp yes

  (setq zettlekasten-paths-alist '(("Main" . "~/Trove/Epektasi/")
                                   ("Zettlekasten" . "~/Trove/Zettlekasten/")
                                   ("Test" . "~/OrgRoamTest/")))

  (defun switch-zettlekasten ()
    (interactive)
    (let* ((keys (mapcar #'car zettlekasten-paths-alist))
           (prompt (format "Select Zettlekasten:"))
           (key (completing-read prompt keys))
           (chosen-zettlekasten-path (cdr (assoc key zettlekasten-paths-alist))))
      (setq org-roam-directory chosen-zettlekasten-path)
      (setq org-roam-db-location (concat chosen-zettlekasten-path "org-roam.db"))
      (org-roam-db-sync)))

#+end_src

** =org-roam-ui.el= Configurations

=org-roam-ui= is used to visualize =org-roam= web. 

#+begin_src emacs-lisp :tangle "archive/emacs/org-roam-ui.el" :mkdirp yes

  (use-package org-roam-ui
    :ensure t)

#+end_src

** =which-key.el= Configurations

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix. For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp :tangle "archive/emacs/which-key.el" :mkdirp yes

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src
** =projectile.el= Configurations

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp :tangle "archive/emacs/projectile.el" :mkdirp yes

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/projects-code")
      (setq projectile-project-search-path '("~/projects-code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

#+begin_src emacs-lisp :tangle "archive/emacs/projectile.el" :mkdirp yes

  (jw/leader-key-def
    "pf"  'projectile-find-file
    "ps"  'projectile-switch-project
    "pp"  'projectile-find-file
    "pc"  'projectile-compile-project
    "pd"  'projectile-dired)

#+end_src

*** Rationale for Archiving

The reason why =projectile= is archived is because I want to utilize the built in emacs package =project.el=. Additionally, my previous configuration utilized =ivy= and currently I am not using it for my completion system. I have also noticed that =project.el= encountered significant amount of lag when changing to a project file, thus to mitigate that lag, I have decided to switch away from =projectile=. Note, there are amazing features that =projectile= offers, however I do not use them, so I see no point in using =projectile= anymore. 

** =org-tangle= Configuration

The following line =#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el :mkdirp yes= cause the tangle command to compile and save the code blocks in the =.emacs.d/init.el= file.

; #+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el :mkdirp yes

** =doom-themes.el= Configuration

I currently am using the [[https://github.com/hlissner/emacs-doom-themes][DOOM Themes]], specifically =doom-dracula=.

#+begin_src emacs-lisp :tangle "archive/emacs/doom-themes.el" :mkdirp yes

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

#+end_src

** =doom-modeline.el= Configuration


[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

If you are running in the =macos= terminal, then you have to make sure that you set the font to =Droid Sans Mono Nerd Font Complete 18=. You can do this by the following steps:

- Navigate to =Settings=
- Navigate to =Profiles= tab
- Navigate to =Text= subtab
- Under the =Font= menu click on =Change=
- Select the appropriate font


#+begin_src emacs-lisp :tangle "archive/emacs/doom-modeline.el" :mkdirp yes

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src


=doom-modeline= icons rely on =nerd-icons=. Thus, you must install the =nerd-icons= if you want to use the icons on the modeline.

#+begin_src emacs-lisp :tangle "archive/emacs/doom-modeline.el" :mkdirp yes

  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )

#+end_src


To turn off icons uncomment the following:

#+begin_src emacs-lisp :tangle "archive/emacs/doom-modeline.el" :mkdirp yes

  ;; (setq doom-modeline-icon nil)

#+end_src


The following contains configurations of the =doom-modeline=. All the configurations here use the =setq=.


#+begin_src emacs-lisp :tangle "archive/emacs/doom-modeline.el" :mkdirp yes

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count t)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

#+end_src


Display the virtual environment version.

#+begin_src emacs-lisp :tangle "archive/emacs/doom-modeline.el" :mkdirp yes

  (setq doom-modeline-env-version t)

#+end_src

** =hydra.el= Configuration

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp :tangle "archive/emacs/hydra.el" :mkdirp yes

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (jw/leader-key-def
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src
