#+title: Emacs Configuration

* Inspirations of this Emacs configuration

The organization of this emacs configuration was inspired by [[https://protesilaos.com/emacs/dotemacs][prot's dotemacs configuration]].

This literate configuration has a script that will convert this file into an =astro.js= page for ease of reference.

* Getting Started

This org file is used to set up my emacs configuration. The code blocks of this org file
will be executed using =org-babel-tangle=. Thus, to initiate you must use =M-x ^org-babel-tangle= or use the key-binding =C-c C-v t=.

** Dependencies

*** aporetic typeface

The GUI version of Emacs uses this typeface, so make sure to have aporetic installed. Here is the [[https://github.com/protesilaos/aporetic][repo]] for the install instructions.

For macos users, you can simply run

#+begin_src bash

  brew install font-aporetic

#+end_src


** Running Emacs

To run emacs in the command-line/terminal simply use the following command while in your command-line/terminal: =emacs -nw=.

* The early initialization of Emacs (=early-init.el=) 

** The =early-init.el= macro to run code only in a Desktop Environment

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  (defvar jw-emacs-tiling-window-manager-regexp "bspwm\\|herbstluftwm\\|i3"
    "Regular expression to  tiling window managers.
  See definition of `prot-emacs-with-desktop-session'.")

  (defmacro jw-emacs-with-desktop-session (&rest body)
    "Expand BODY if desktop session is not a tiling window manager.
  See `prot-emacs-tiling-window-manager-regexp' for what
  constitutes a matching tiling window manager."
    (declare (indent 0))
    `(when-let ((session (getenv "DESKTOP_SESSION"))
                ((not (string-match-p session jw-emacs-tiling-window-manager-regexp))))
       ,@body))

#+end_src

** The =early-init.el= code to set frame parameters

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  ;; Set frame parameters early (without font-related settings;; )
  (setq initial-frame-alist
        (append '((alpha . (90 . 90))
                  (fullscreen . maximized))
                initial-frame-alist))

  (setq default-frame-alist
        (append '((alpha . (90 . 90))
                  (fullscreen . maximized))
                default-frame-alist))


#+end_src

** The =early-init.el= basic frame settings

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t ; only for mouse events, which I seldom use
        use-file-dialog nil
        use-short-answers t
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t
        inhibit-startup-echo-area-message user-login-name ; read the docstring
        inhibit-startup-buffer-menu t)

  ;; I do not use those graphical elements by default, but I do enable
  ;; them from time-to-time for testing purposes or to demonstrate
  ;; something.  NEVER tell a beginner to disable any of these.  They
  ;; are helpful.
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

#+end_src
** The =early-init.el= hook to improve Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

Also, turn on =lexical-binding= for the init file!

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  ;; -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

** The =early-init.el= defines general theme related functions

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes
  (defun jw-emacs-theme-gsettings-dark-p ()
    "Return non-nil if gsettings (GNOME) has a dark theme.
  Return nil if the DESKTOP_SESSION is either bspwm or
  herbstluftwm, per the configuration of my dotfiles.  Also check
  the `delight' shell script."
    (jw-emacs-with-desktop-session
      (string-match-p
       "dark"
       (shell-command-to-string "gsettings get org.gnome.desktop.interface color-scheme"))))

  (defun jw-emacs-theme-twm-dark-p ()
    "Return non-nil if my custom setup has a dark theme.
  I place a file in ~/.config/prot-xtwm-active-theme which contains
  a single word describing my system-wide theme.  This is part of
  my dotfiles.  Check my `delight' shell script for more."
    (when-let ((file "~/.config/jw-xtwm-active-theme")
               ((file-exists-p file)))
        (string-match-p
         "dark"
         (with-temp-buffer
           (insert-file-contents file)
           (buffer-string)))))

  (defun jw-emacs-theme-environment-dark-p ()
    "Return non-nil if environment theme is dark."
    (or (jw-emacs-theme-twm-dark-p)
        (jw-emacs-theme-gsettings-dark-p)))

  (defun jw-emacs-re-enable-frame-theme (_frame)
    "Re-enable active theme, if any, upon FRAME creation.
  Add this to `after-make-frame-functions' so that new frames do
  not retain the generic background set by the function
  `prot-emacs-avoid-initial-flash-of-light'."
    (when-let ((theme (car custom-enabled-themes)))
      (enable-theme theme)))

#+end_src

** The =early-init.el= gives a name to the default frame

The following configuration is taken from [[https://protesilaos.com/emacs/dotemacs#h:ad227f7e-b0a7-43f8-91d6-b50db82da9ad][prot's configuration]], with the description from Prot,

"Finally, I like to call my default frame =home=. This is because I use my =beframe= package to group the list of buffers on a per-frame basis ([[https://protesilaos.com/emacs/dotemacs#h:77e4f174-0c86-460d-8a54-47545f922ae9][The prot-emacs-window.el section about beframe]]). The multi-frame arrangement is the best thing I ever did to boost my productivity: bonus points when used in tandem with a tiling window manager.

Naming frames allows you to select them using completion. Emacs can do this (=M-x select-frame-by-name=), though it is not always reliable as it depends on the window manager (it works fine on GNOME, from what I can tell). For minimalist window managers on Linux, something like the =rofi= program can select system windows based on their name."

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  (add-hook 'after-init-hook (lambda () (set-frame-name "home")))

#+end_src

** The =early-init.el= section to add modules and libraries to the Emacs configuration

#+begin_src emacs-lisp :tangle ".emacs.d/early-init.el" :mkdirp yes

  (add-to-list 'load-path (expand-file-name "jw-emacs-modules" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "jw-lisp" user-emacs-directory))

#+end_src

* The main initialization of Emacs (=init.el=)

** The =init.el= key installations post-=early-init.el=

These installations do not require the package manager to be configured and are also essential for the functioning of the rest of this configuration.

*** straight.el

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

    ;; installation of straight.el package manager
    (defvar bootstrap-version)
    (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
        (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load bootstrap-file nil 'nomessage))

#+end_src

** The =init.el= for aesthetics 

Want to disable to mode-line at the very start and enable it when the mode-line configuration is loaded to make startup look smooth. The mode-line will be added when the mode-line is loaded ([[*The =jw-emacs-modeline.el= to enable the mode-line][The =jw-emacs-modeline.el= to enable the mode-line]]).

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

    ;; conditional to remove display of mode-line
    (setq-default mode-line-format nil)

#+end_src


#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

    (require 'dired)

    ;; make dired look nice
    (add-hook 'dired-mode-hook
                (lambda ()
                (define-key dired-mode-map (kbd "(") 'dired-hide-details-mode)
                ;; Uncomment the next line to start with details hidden
                (dired-hide-details-mode 1)
                ))

#+end_src


** The =init.el= for package manager

[[https://github.com/jwiegley/use-package][use-package]] is a native package built into emacs since =v29.0.0= and is used in this configuration to make it a lot easier to automate the installation and configuration of everything else.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

    ;; Install use-package
    (straight-use-package 'use-package)

    (setq straight-use-package-by-default t)

#+end_src

To debug =use-package= run =emacs --debug-init=.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (if init-file-debug
      (setq use-package-verbose t
            use-package-expand-minimally nil
            use-package-compute-statistics t
            debug-on-error t)
    (setq use-package-verbose nil
          use-package-expand-minimally t))

#+end_src


** The =init.el= for keeping =.emacs.d= clean

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  (use-package no-littering
    :straight t)

#+end_src

** The =init.el= for easy leader key management (=general.el=)

[[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings, especially
in conjunction with Evil modes.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (use-package general
    :straight t
    :config
    (general-create-definer jw/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src

** The =init.el= essential key configurations

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; bind quit prompting func to escape
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src


#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; use spaces instead of tabs for indentation
  (setq-default indent-tabs-mode nil)

#+end_src


#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes
  ;; for ui toggles
  (jw/leader-key-def
    "t"  '(:ignore t :which-key "toggles")
    "tw" 'whitespace-mode
    )

#+end_src

*** evil-mode

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-redo)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-normal-state-map (kbd "C-r") 'evil-redo)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :straight t
    :config
    (evil-collection-init)
    (with-eval-after-load 'forge
    (evil-collection-forge-setup)))


#+end_src

***  smooth scrolling

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; Enable smooth scrolling with a margin
  (setq scroll-margin 5)          ; Start scrolling when cursor is 5 lines from top/bottom
  (setq scroll-conservatively 100) ; Scroll line by line, not by half-screen jumps
  (setq scroll-step 1)            ; Scroll one line at a time when needed


#+end_src

** The =init.el= setting to always start with the *scratch* buffer

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; Always start with *scratch*
  (setq initial-buffer-choice t)

#+end_src
** The =init.el= for additional configurations for =emacs=

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; A few more useful configurations...
  (use-package emacs
    :straight t
    :init
    ;; TAB cycle if there are only few candidates
    ;; (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    ;; (setq tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (setq text-mode-ispell-word-completion nil)

    ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
    ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
    ;; setting is useful beyond Corfu.
    (setq read-extended-command-predicate #'command-completion-default-include-p))

#+end_src

** The =init.el= user options

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  ;; taken from prot's config
  ;; For those who use my dotfiles and need an easy way to write their
  ;; own extras on top of what I already load: search below for the files
  ;; prot-emacs-pre-custom.el and prot-emacs-post-custom.el
  (defgroup jw-emacs nil
    "User options for my dotemacs.
  These produce the expected results only when set in a file called
  prot-emacs-pre-custom.el.  This file must be in the same
  directory as the init.el."
    :group 'file)

#+end_src
** The =init.el= user option to enable which-key

The =which-key= package provides hints for keys that complete the currently incomplete sequence. Here we determine whether to load the module or not. I personally never rely on =which-key= even if I enable its mode. If I ever need to review which key bindings are available I will either type =C-h= to complete a key sequence (produces a Help buffer with relevant keys) or I will do =C-h m= (=M-x describe-mode= to get information about the current major mode).

Remember to read how these options come into effect ([[https://protesilaos.com/emacs/dotemacs#h:5a41861f-4c38-45ac-8da2-51d77c0b4a73][The init.el user options]]).

Also check the [[https://protesilaos.com/emacs/dotemacs#h:ddb1070d-2f91-4224-ad43-ef03f038f787][prot-emacs-which-key.el module]].

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (defcustom jw-emacs-load-which-key t
    "When non-nil, display key binding hints after a short delay.
  This user option must be set in the `prot-emacs-pre-custom.el'
  file.  If that file exists in the Emacs directory, it is loaded
  before all other modules of my setup."
    :group 'jw-emacs
    :type 'boolean)

#+end_src

** The =init.el= user option to load a theme family

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes


  (defcustom jw-emacs-load-theme-family 'modus
    "Set of themes to load.
  Valid values are the symbols `ef', `modus', and `standard', which
  reference the `ef-themes', `modus-themes', and `standard-themes',
  respectively.

  A nil value does not load any of the above (use Emacs without a
  theme).

  This user option must be set in the `jw-emacs-pre-custom.el'
  file.  If that file exists in the Emacs directory, it is loaded
  before all other modules of my setup."
    :group 'jw-emacs
    :type '(choice :tag "Set of themes to load" :value modus
                   (const :tag "The `ef-themes' module" ef)
                   (const :tag "The `modus-themes' module" modus)
                   (const :tag "The `standard-themes' module" standard)
                   (const :tag "Do not load a theme module" nil)))

#+end_src

** The =init.el= final part to load the individual modules

Load the =jw-emacs-modules=.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes
  (load (locate-user-emacs-file "jw-emacs-pre-custom.el") :no-error :no-message)
  (require 'jw-emacs-theme)
  (require 'jw-emacs-essentials)
  (require 'jw-emacs-modeline)
  (require 'jw-emacs-completion)
  (require 'jw-emacs-org)
  (require 'jw-emacs-git)
  (require 'jw-emacs-dired)
  (require 'jw-emacs-information-management)
  (require 'jw-emacs-productivity)
  (require 'jw-emacs-development)
  (require 'jw-emacs-which-key)
  (require 'jw-emacs-ai)
  (require 'jw-emacs-langs)

#+end_src

Load =jw-lisp=.

#+begin_src emacs-lisp :tangle ".emacs.d/init.el" :mkdirp yes

  (require 'jw-copy)

#+end_src
* The modules of my Emacs configuration (=jw-emacs-modules/=)

** The =jw-emacs-theme.el= module

*** jw-emacs-load-theme-family

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;; Theme setup and related

  ;;;; Load the desired theme module
  ;; These all reference my packages: `modus-themes', `ef-themes',
  ;; `standard-themes'.
  (when jw-emacs-load-theme-family
    (require
     (pcase jw-emacs-load-theme-family
       ('ef 'jw-emacs-ef-themes)
       ('modus 'jw-emacs-modus-themes)
       ('standard 'jw-emacs-standard-themes))))

#+end_src

**** jw-emacs-modus-themes.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modus-themes.el" :mkdirp yes

  ;;; The Modus themes

  ;; The themes are highly customisable.  Read the manual:
  ;; <https://protesilaos.com/emacs/modus-themes>.
  (use-package modus-themes
    :straight t
    :demand t
    :bind (("<f5>" . modus-themes-toggle)
           ("C-<f5>" . modus-themes-select))
    :config
    (setq modus-themes-custom-auto-reload nil
          modus-themes-to-toggle '(modus-operandi modus-vivendi)
          ;; modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
          ;; modus-themes-to-toggle '(modus-operandi-deuteranopia modus-vivendi-deuteranopia)
          ;; modus-themes-to-toggle '(modus-operandi-tritanopia modus-vivendi-tritanopia)
          modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui t
          modus-themes-italic-constructs t
          modus-themes-bold-constructs nil
          modus-themes-completions '((t . (extrabold)))
          modus-themes-prompts '(extrabold)
          modus-themes-headings
          '((agenda-structure . (variable-pitch light 2.2))
            (agenda-date . (variable-pitch regular 1.3))
            (t . (regular 1.15))))

    (setq modus-themes-common-palette-overrides nil))
    (if (jw-emacs-theme-environment-dark-p)
      (modus-themes-load-theme (cadr modus-themes-to-toggle))
      (modus-themes-load-theme (car modus-themes-to-toggle)))
   (provide 'jw-emacs-modus-themes)

#+end_src

**** jw-emacs-ef-themes.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-ef-themes.el" :mkdirp yes

  ;;; The Ef (εὖ) themes

  ;; The themes are customisable.  Read the manual:
  ;; <https://protesilaos.com/emacs/ef-themes>.
  (use-package ef-themes
    :straight t
    :demand t
    :bind ("<f5>" . ef-themes-select)
    :config
    (setq ef-themes-variable-pitch-ui t
          ef-themes-mixed-fonts t
          ef-themes-headings ; read the manual's entry of the doc string
          '((0 . (variable-pitch light 1.9))
            (1 . (variable-pitch light 1.8))
            (2 . (variable-pitch regular 1.7))
            (3 . (variable-pitch regular 1.6))
            (4 . (variable-pitch regular 1.5))
            (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
            (6 . (variable-pitch 1.3))
            (7 . (variable-pitch 1.2))
            (agenda-date . (semilight 1.5))
            (agenda-structure . (variable-pitch light 1.9))
            (t . (variable-pitch 1.1))))

    ;; The `ef-themes' provide lots of themes.  I want to pick one at
    ;; random when I start Emacs: the `ef-themes-load-random' does just
    ;; that (it can be called interactively as well).  I just check with
    ;; my desktop environment to determine if the choice should be about
    ;; a light or a dark theme.  Those functions are in my init.el.
    (if (jw-emacs-theme-environment-dark-p)
        (ef-themes-load-random 'dark)
      (ef-themes-load-random 'light)))
(provide 'jw-emacs-ef-themes)
#+end_src

*** pulsar.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;;; Pulsar
  ;; Read the pulsar manual: <https://protesilaos.com/emacs/pulsar>.
  (use-package pulsar
    :straight t
    :config
    (setopt pulsar-pulse t
            pulsar-delay 0.055
            pulsar-iterations 10
            pulsar-face 'pulsar-magenta
            pulsar-highlight-face 'pulsar-cyan)

    (pulsar-global-mode 1)
    :hook
    ;; There are convenience functions/commands which pulse the line using
    ;; a specific colour: `pulsar-pulse-line-red' is one of them.
    ((next-error . (pulsar-pulse-line-red pulsar-recenter-top pulsar-reveal-entry))
     (minibuffer-setup . pulsar-pulse-line-red))
    :bind
    ;; pulsar does not define any key bindings.  This is just my personal
    ;; preference.  Remember to read the manual on the matter.  Evaluate:
    ;;
    ;; (info "(elisp) Key Binding Conventions")
    (("C-x l" . pulsar-pulse-line) ; override `count-lines-page'
     ("C-x L" . pulsar-highlight-dwim))) ; or use `pulsar-highlight-line'
#+end_src

*** lin.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;;; Lin
  ;; Read the lin manual: <https://protesilaos.com/emacs/lin>.
  (use-package lin
    :straight t
    :hook (after-init . lin-global-mode) ; applies to all `lin-mode-hooks'
    :config
    ;; You can use this to live update the face:
    ;;
    ;; (customize-set-variable 'lin-face 'lin-green)
    ;;
    ;; Or `setopt' on Emacs 29: (setopt lin-face 'lin-yellow)
    ;;
    ;; I still prefer `setq' for consistency.
    (setq lin-face 'lin-magenta))

#+end_src

*** spacious-padding.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;;; Increase padding of windows/frames
  ;; Yet another one of my packages:
  ;; <https://protesilaos.com/codelog/2023-06-03-emacs-spacious-padding/>.
  (use-package spacious-padding
    :straight t
    :if (display-graphic-p)
    :hook (after-init . spacious-padding-mode)
    :bind ("<f8>" . spacious-padding-mode)
    :init
    ;; These are the defaults, but I keep it here for visiibility.
    (setq spacious-padding-widths
          '( :internal-border-width 15
             :header-line-width 4
             :mode-line-width 6
             :tab-width 4
             :right-divider-width 1
             :scroll-bar-width 8
             :left-fringe-width 20
             :right-fringe-width 20))

    ;; Read the doc string of `spacious-padding-subtle-mode-line' as
    ;; it is very flexible.
    (setq spacious-padding-subtle-mode-line
          `( :mode-line-active ,(if (or (eq jw-emacs-load-theme-family 'modus)
                                        (eq jw-emacs-load-theme-family 'standard))
                                    'default
                                  'help-key-binding)
             :mode-line-inactive window-divider)))

#+end_src

*** cursory.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;; Cursor appearance (cursory)
  ;; Read the manual: <https://protesilaos.com/emacs/cursory>.
  (use-package cursory
    :straight t
    :demand t
    :if (display-graphic-p)
    :config
    (setq cursory-presets
          '((box
             :blink-cursor-interval 1.2)
            (box-no-blink
             :blink-cursor-mode -1)
            (bar
             :cursor-type (bar . 2)
             :blink-cursor-interval 0.8)
            (bar-no-other-window
             :inherit bar
             :cursor-in-non-selected-windows nil)
            (bar-no-blink
             :cursor-type (bar . 2)
             :blink-cursor-mode -1)
            (underscore
             :cursor-type (hbar . 3)
             :blink-cursor-blinks 50)
            (underscore-thin-other-window
             :inherit underscore
             :cursor-in-non-selected-windows (hbar . 1))
            (underscore-thick
             :cursor-type (hbar . 8)
             :blink-cursor-interval 0.3
             :blink-cursor-blinks 50
             :cursor-in-non-selected-windows (hbar . 3))
            (underscore-thick-no-blink
             :blink-cursor-mode -1
             :cursor-type (hbar . 8)
             :cursor-in-non-selected-windows (hbar . 3))
            (t ; the default values
             :cursor-type box
             :cursor-in-non-selected-windows hollow
             :blink-cursor-mode 1
             :blink-cursor-blinks 10
             :blink-cursor-interval 0.2
             :blink-cursor-delay 0.2)))

    ;; I am using the default values of `cursory-latest-state-file'.

    ;; Set last preset or fall back to desired style from `cursory-presets'.
    (cursory-set-preset (or (cursory-restore-latest-preset) 'box))
    :hook
    ;; The other side of `cursory-restore-latest-preset'.
    (kill-emacs . cursory-store-latest-preset)
    :bind
    ;; We have to use the "point" mnemonic, because C-c c is often the
    ;; suggested binding for `org-capture' and is the one I use as well.
    ("C-c p" . cursory-set-preset))
#+end_src

*** theme-buffet.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

   ;;;; Theme buffet
  (use-package theme-buffet
    :straight t
    :after (:any modus-themes ef-themes)
    :defer 1
    :config
    (let ((modus-themes-p (featurep 'modus-themes))
          (ef-themes-p (featurep 'ef-themes)))
      (setq theme-buffet-menu 'end-user)
      (setq theme-buffet-end-user
            (cond
             ((and modus-themes-p ef-themes-p)
              '( :night     (modus-vivendi ef-dark ef-winter ef-autumn ef-night ef-duo-dark ef-symbiosis)
                 :morning   (modus-operandi ef-light ef-cyprus ef-spring ef-frost ef-duo-light)
                 :afternoon (modus-operandi-tinted ef-arbutus ef-day ef-kassio ef-summer ef-elea-light ef-maris-light ef-melissa-light ef-trio-light ef-reverie)
                 :evening   (modus-vivendi-tinted ef-rosa ef-elea-dark ef-maris-dark ef-melissa-dark ef-trio-dark ef-dream)))
             (ef-themes-p
              '( :night     (ef-dark ef-winter ef-autumn ef-night ef-duo-dark ef-symbiosis)
                 :morning   (ef-light ef-cyprus ef-spring ef-frost ef-duo-light)
                 :afternoon (ef-arbutus ef-day ef-kassio ef-summer ef-elea-light ef-maris-light ef-melissa-light ef-trio-light ef-reverie)
                 :evening   (ef-rosa ef-elea-dark ef-maris-dark ef-melissa-dark ef-trio-dark ef-dream)))
             (modus-themes-p
              '( :night     (modus-vivendi modus-vivendi-tinted modus-vivendi-tritanopia modus-vivendi-deuteranopia)
                 :morning   (modus-operandi modus-operandi-tinted modus-operandi-tritanopia modus-operandi-deuteranopia)
                 :afternoon (modus-operandi modus-operandi-tinted modus-operandi-tritanopia modus-operandi-deuteranopia)
                 :evening   (modus-vivendi modus-vivendi-tinted modus-vivendi-tritanopia modus-vivendi-deuteranopia)))))

      (when (or modus-themes-p ef-themes-p)
        (theme-buffet-timer-hours 1))))

#+end_src

*** fontaine.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  ;;;; Fontaine (font configurations)
  ;; Read the manual: <https://protesilaos.com/emacs/fontaine>
  (use-package fontaine
    :straight t
    :if (display-graphic-p)
    :hook
    ;; Persist the latest font preset when closing/starting Emacs.
    ((after-init . fontaine-mode)
     (after-init . (lambda ()
                     ;; Set last preset or fall back to desired style from `fontaine-presets'.
                     (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular)))))
    :bind (("C-c f" . fontaine-set-preset)
           ("C-c F" . fontaine-toggle-preset))
    :config
    ;; And this is for Emacs28.
    (setq-default text-scale-remap-header-line t)

    ;; This is the default value.  Just including it here for
    ;; completeness.
    (setq fontaine-latest-state-file (locate-user-emacs-file "fontaine-latest-state.eld"))

    ;; The font family is my design: <https://github.com/protesilaos/aporetic>.
    (setq fontaine-presets
          '((small
             :default-height 80)
            (regular) ; like this it uses all the fallback values and is named `regular'
            (medium
             :default-family "Aporetic Serif Mono"
             :default-height 115
             :fixed-pitch-family "Aporetic Serif Mono"
             :variable-pitch-family "Aporetic Sans")
            (large
             :default-height 150)
            (presentation
             :default-height 180)
            (jumbo
             :inherit medium
             :default-height 260)
            (t
             ;; I keep all properties for didactic purposes, but most can be
             ;; omitted.  See the fontaine manual for the technicalities:
             ;; <https://protesilaos.com/emacs/fontaine>.
             :default-family "Aporetic Sans Mono"
             :default-weight regular
             :default-slant normal
             :default-width normal
             :default-height 100

             :fixed-pitch-family "Aporetic Sans Mono"
             :fixed-pitch-weight nil
             :fixed-pitch-slant nil
             :fixed-pitch-width nil
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil
             :fixed-pitch-serif-weight nil
             :fixed-pitch-serif-slant nil
             :fixed-pitch-serif-width nil
             :fixed-pitch-serif-height 1.0

             :variable-pitch-family "Aporetic Serif"
             :variable-pitch-weight nil
             :variable-pitch-slant nil
             :variable-pitch-width nil
             :variable-pitch-height 1.0

             :mode-line-active-family nil
             :mode-line-active-weight nil
             :mode-line-active-slant nil
             :mode-line-active-width nil
             :mode-line-active-height 1.0

             :mode-line-inactive-family nil
             :mode-line-inactive-weight nil
             :mode-line-inactive-slant nil
             :mode-line-inactive-width nil
             :mode-line-inactive-height 1.0

             :header-line-family nil
             :header-line-weight nil
             :header-line-slant nil
             :header-line-width nil
             :header-line-height 1.0

             :line-number-family nil
             :line-number-weight nil
             :line-number-slant nil
             :line-number-width nil
             :line-number-height 1.0

             :tab-bar-family nil
             :tab-bar-weight nil
             :tab-bar-slant nil
             :tab-bar-width nil
             :tab-bar-height 1.0

             :tab-line-family nil
             :tab-line-weight nil
             :tab-line-slant nil
             :tab-line-width nil
             :tab-line-height 1.0

             :bold-family nil
             :bold-slant nil
             :bold-weight bold
             :bold-width nil
             :bold-height 1.0

             :italic-family nil
             :italic-weight nil
             :italic-slant italic
             :italic-width nil
             :italic-height 1.0

             :line-spacing nil)))

    (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))


#+end_src

*** variable-pitch-mode.el --native 

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

    ;;;;; `variable-pitch-mode' setup
  (use-package face-remap
    :straight nil
    :functions jw/enable-variable-pitch
    :bind ( :map ctl-x-x-map
            ("v" . variable-pitch-mode))
    :hook ((text-mode notmuch-show-mode elfeed-show-mode) . jw/enable-variable-pitch)
    :config
    ;; NOTE 2022-11-20: This may not cover every case, though it works
    ;; fine in my workflow.  I am still undecided by EWW.
    (defun jw/enable-variable-pitch ()
      (unless (derived-mode-p 'mhtml-mode 'nxml-mode 'yaml-mode)
        (variable-pitch-mode 1)))
  ;;;;; Resize keys with global effect
    :bind
    ;; Emacs 29 introduces commands that resize the font across all
    ;; buffers (including the minibuffer), which is what I want, as
    ;; opposed to doing it only in the current buffer.  The keys are the
    ;; same as the defaults.
    (("C-x C-=" . global-text-scale-adjust)
     ("C-x C-+" . global-text-scale-adjust)
     ("C-x C-0" . global-text-scale-adjust)))

#+end_src

*** The =jw-emacs-theme.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-theme.el" :mkdirp yes

  (provide 'jw-emacs-theme)

#+end_src

** The =jw-emacs-essentials.el= module

*** gui configurations

Enable line numbers globally, but not in the following modes: org, term, shell, and eshell.

In addition to line numbers, the column number will also be displayed. 

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el"

  ;; Enable column numbers
  (column-number-mode)

  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  markdown-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Since =fill-paragraph= wraps =fill-column=, we adjust the size of the =fill-column= variable.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el"

  (setq-default fill-column 80)

#+end_src

*** helpful.el

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el" :mkdirp yes

  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

#+end_src

*** auth-sources.el -- native


#+begin_src emacs-lisp ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el" :mkdirp yes

  (setq auth-sources '("~/.authinfo" "~/.netrc"))

#+end_src

*** The =jw-emacs-essentials.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-essentials.el" :mkdirp yes

  (provide 'jw-emacs-essentials)

#+end_src

** The =jw-emacs-modeline.el= module

*** enable the mode-line

The mode-line was disabled earlier ([[*The =init.el= conditional to remove display of mode-line][The =init.el= conditional to remove display of mode-line]]) so that the startup UI would look smooth

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (setq-default mode-line-format (default-value 'mode-line-format))

#+end_src

*** basic user interface

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)

#+end_src

*** doom-modeline.el

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

If you are running in the =macos= terminal, then you have to make sure that you set the font to =Droid Sans Mono Nerd Font Complete 18=. You can do this by the following steps:

- Navigate to =Settings=
- Navigate to =Profiles= tab
- Navigate to =Text= subtab
- Under the =Font= menu click on =Change=
- Select the appropriate font


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src


=doom-modeline= icons rely on =nerd-icons=. Thus, you must install the =nerd-icons= if you want to use the icons on the modeline.

IMPORTANT: must run the following command — =Mx - nerd-icons-install-fonts= for the icons to populate. See the github issue here: [[https://github.com/doomemacs/doomemacs/issues/7368#issuecomment-1689292109][Doom Emacs Issue #7368]]

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )

#+end_src


To turn off icons uncomment the following:

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  ;; (setq doom-modeline-icon nil)

#+end_src


The following contains configurations of the =doom-modeline=. All the configurations here use the =setq=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count t)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

#+end_src

Display the virtual environment version.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (setq doom-modeline-env-version t)

#+end_src

*** The =jw-emacs-modeline.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-modeline.el" :mkdirp yes

  (provide 'jw-emacs-modeline)

#+end_src

** The =jw-emacs-completion.el= module
*** savehist.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  ;; for preserving minibuffer history
  (use-package savehist
    :straight t
    :config
    (setq history-length 25)
    (savehist-mode 1))

    ;; Individual history elements can be configured separately
    ;;(put 'minibuffer-history 'history-length 25)
    ;;(put 'evil-ex-history 'history-length 50)
    ;;(put 'kill-ring 'history-length 25))

#+end_src

*** vertico.el

Completions with =vertico.el=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (defun jw/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
        (delete-word (- arg))))

  (use-package vertico
    :straight t
    :bind (:map vertico-map
           ("C-j" . vertico-next)
           ("C-k" . vertico-previous)
           ("C-f" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . jw/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

#+end_src


*** corfu.el

Completions in region with =corfu.el=.
#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes
  (use-package corfu
    :straight t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.8)
    (corfu-popinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert) ; insert previewed candidate
    (corfu-preselect 'prompt)
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
    :bind (:map corfu-map
         ("C-j" . corfu-next)
         ("C-k" . corfu-previous)
         ("C-f" . corfu-insert))
    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

#+end_src

*** company.el

Since =corfu.el= does not support running emacs in the terminal, I will just stick with =company.el= instead of =corfu-terminal=.

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (unless (display-graphic-p)
      (progn
        ;; Configuration for GUI mode
        (use-package company
          :after eglot
          :hook (eglot--managed-mode . company-mode)
          :bind (:map company-active-map
                 ("<tab>" . company-complete-selection))
                (:map eglot-mode-map
                 ("<tab>" . company-indent-or-complete-common))
          :custom
          (company-minimum-prefix-length 1)
          (company-idle-delay 0.0))
      
        (use-package company-box
          :hook (company-mode . company-box-mode)))
    ;; Configuration for terminal mode (optional)
    ;; Add your terminal mode specific configuration here
    )

#+end_src

*** cape.el

Additional completions in region with =cape.el=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (use-package cape
    :straight t
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev))

#+end_src

*** orderless.el

For candidate filtering.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

#+end_src

*** marginalia.el

For completion notations.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

;;; Detailed completion annotations (marginalia.el)
(use-package marginalia
  :straight t
  :hook (after-init . marginalia-mode)
  :config
  (setq marginalia-max-relative-age 0)) ; absolute time

#+end_src

*** The =jw-emacs-completion.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-completion.el" :mkdirp yes

  (provide 'jw-emacs-completion)

#+end_src

** The =jw-emacs-org.el= module
:PROPERTIES:
:ID:       77434357-7761-4049-9F64-1808E10E549D
:END:

*** org-mode setup

Set up Org Mode with a baseline configuration. The following sections will add more things to it.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (defun jw/org-mode-setup ()
    (org-indent-mode) ;; auto-indentation for headings
    (variable-pitch-mode 1) ;; cause fonts to vary by proportionality
    (visual-line-mode 1)) ;; wrap the text so that it does not go out of view

  (use-package org
    :hook (org-mode . jw/org-mode-setup)
    :config
    (setq org-ellipsis " ▾") ;; when org headings closed down arrow instead of ellipsis
    (setq org-M-RET-may-split-line '((default . nil))) ;; when auto generating subsequent headings, avoid splitting the line
    (setq org-insert-heading-respect-content t) ;; when creating new heading respects the content of which heading it was originally
    (setq org-log-done 'time)
    (setq org-log-into-drawer t) ;; task change is in drawer instead of content
    ;; keywords for org task states

    )


#+end_src

*** org-agenda
:PROPERTIES:
:ID:       43652950-B9D2-4FAF-8F0C-75D1496E85FE
:END:

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  ;; setting dir of tasks
  (setq org-agenda-files (directory-files-recursively "~/Otzar/Docs/agenda/" "\\.org$"))
  (setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w!)" "|" "CANCEL(c!)" "DONE(d!)"))) 

#+end_src

*** org-pomodoro

Configure for macos to play sound:

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  ;; on macos, fix "This Emacs binary lacks sound support" 
  ;; - https://github.com/leoliu/play-sound-osx/blob/master/play-sound.el
  ;; - update according to https://github.com/leoliu/play-sound-osx/issues/2#issuecomment-1088360638
  (when (eq system-type 'darwin)
    (unless (and (fboundp 'play-sound-internal)
                 (subrp (symbol-function 'play-sound-internal)))
      (defun play-sound-internal (sound)
        "Internal function for `play-sound' (which see)."
        (or (eq (car-safe sound) 'sound)
            (signal 'wrong-type-argument (list sound)))
 
        (cl-destructuring-bind (&key file data volume device)
            (cdr sound)
 
          (and (or data device)
               (error "DATA and DEVICE arg not supported"))
 
          (apply #'start-process "afplay" nil
                 "afplay" (append (and volume (list "-v" volume))
                                  (list (expand-file-name file data-directory))))))))


#+end_src


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (setq org-clock-sound "~/.dotfiles/.assets/sounds/mixkit-alert-quick-chime-766.wav")

#+end_src


The following is for sound support,

Usually this is a problem for macos and I found a snippet of code that enables sound support. The way to tell is by running =M-x play-sound-file= and navigating to the =.wav= file will ouput "This Emacs binary lacks sound support."

#+begin_src emacs-lisp
  ;; on macos, fix "This Emacs binary lacks sound support" 
  ;; - https://github.com/leoliu/play-sound-osx/blob/master/play-sound.el
  ;; - update according to https://github.com/leoliu/play-sound-osx/issues/2#issuecomment-1088360638
  (when (eq system-type 'darwin)
    (unless (and (fboundp 'play-sound-internal)
                 (subrp (symbol-function 'play-sound-internal)))
      (defun play-sound-internal (sound)
        "Internal function for `play-sound' (which see)."
        (or (eq (car-safe sound) 'sound)
            (signal 'wrong-type-argument (list sound)))
      
        (cl-destructuring-bind (&key file data volume device)
            (cdr sound)
        
          (and (or data device)
               (error "DATA and DEVICE arg not supported"))
        
          (apply #'start-process "afplay" nil
                 "afplay" (append (and volume (list "-v" volume))
                                  (list (expand-file-name file data-directory))))))))

#+end_src

*** org-links

As recommended by the official =org= manual to have these keys bound.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c C-l") 'org-insert-link)

#+end_src

Instead of relying on just the path/etc, allow orgmode to use unique IDs to create internal links that can point to specific headings in org files.

With the =create-if-interactive= setting, it only creates in interactive settings.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (setq org-id-link-to-org-use-id 'create-if-interactive)

#+end_src

*** bullet aesthetics

Customize the heading bullets to make it consistent and nicer.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** inline images


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (setq org-image-actual-width nil)
  (setq org-startup-with-inline-images t)
  (add-hook 'org-mode-hook 'org-display-inline-images)

#+end_src


*** org-tempo.el --native

These structured templates are used to auto generate code blocks for org mode. In order
to use the template simply type =<= followed by the abbreviation of the language and
hit the =TAB= button. For example, the python snippit would be =<py TAB=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("clang" . "src c"))
(add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))

#+end_src

*** org-babel.el

This snippet adds a hook to =org-mode= buffers so that =jw/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun jw/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jw/org-babel-tangle-config)))

#+end_src

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

*** visual-fill-column.el

=visual-fill-column= will create a document looking display with the extra padding on the left and on the right.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (defun jw/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . jw/org-mode-visual-fill)
    (markdown-mode . jw/org-mode-visual-fill))

#+end_src

*** org-latex

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
                 "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("org-plain-no-section-numbering-latex"
                 "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                 ("\\section*{%s}" . "\\section*{%s}")
                 ("\\subsection*{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection*{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph*{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph*{%s}" . "\\subparagraph*{%s}"))))

#+end_src

*** The =jw-emacs-org.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-org.el" :mkdirp yes

  (provide 'jw-emacs-org)

#+end_src

** The =jw-emacs-git.el= module
*** magit.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-git.el" :mkdirp yes

  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)

  (setq forge-add-default-bindings nil)

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit
    )
  (use-package evil-collection
    :after (evil forge)
    :config
    (evil-collection-init)
    (evil-collection-forge-setup))

#+end_src

**** gpg signing

When on the commit buffer, the argument for `gpg-signing` or `-S` may not be displayed. To resolve this issue manually, on the commit buffer menu, you must enter transient mode with `C-x l` and follow the prompting from there by typing the argument that you want to change the layering and then set the layering.

*** The =jw-emacs-git.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-git.el" :mkdirp yes

  (provide 'jw-emacs-git)

#+end_src

** The =jw-emacs-dired.el= module
*** dired display

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-dired.el" :mkdirp yes

  (setq dired-listing-switches "-alD")

#+end_src

*** gnu gls

For macos, make sure to have =coreutils= installed. To install run, =brew install coreutils=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-dired.el" :mkdirp yes

  (setq insert-directory-program "gls" 
       dired-use-ls-dired t)

#+end_src

*** The =jw-emacs-dired.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-dired.el" :mkdirp yes

  (provide 'jw-emacs-dired)

#+end_src

** The =jw-emacs-information-management.el= module
*** denote.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (use-package denote
                   :straight t)

  (setq denote-directory (expand-file-name "~/Otzar/Gnosis/"))
  (setq denote-save-buffer-after-creation nil)

#+end_src


Enable the denote dired mode for all files so that the components can easily be seen.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (add-hook 'dired-mode-hook #'denote-dired-mode)

#+end_src

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (setq denote-known-keywords '("theology" "philosophy" "politics" "journal" "analysis" "linguistics"))
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)

#+end_src

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (setq denote-file-type nil) ; Org is the default, set others here
  (setq denote-prompts '(subdirectory title keywords))
  (setq denote-excluded-directories-regexp nil)
  (setq denote-excluded-keywords-regexp nil)
  (setq denote-rename-no-confirm nil) ; Set to t if you are familiar with `denote-rename-file'

  ;; Pick dates, where relevant, with Org's advanced interface:
  (setq denote-date-prompt-use-org-read-date t)
  ;; Read this manual for how to specify `denote-templates'.  We do not
  ;; include an example here to avoid potential confusion.
  (setq denote-date-format nil) ; read doc string

  ;; By default, we do not show the context of links.  We just display
  ;; file names.  This provides a more informative view.
  (setq denote-backlinks-show-context t)

  ;; Also see `denote-link-backlinks-display-buffer-action' which is a bit
  ;; advanced.

  ;; If you use Markdown or plain text files (Org renders links as buttons
  ;; right away)
  (add-hook 'find-file-hook #'denote-fontify-links-mode-maybe)

  (with-eval-after-load 'org-capture
  (setq denote-org-capture-specifiers "%l\n%i\n%?")
  (add-to-list 'org-capture-templates
               '("n" "New note (with denote.el)" plain
                 (file denote-last-path)
                 #'denote-org-capture
                 :no-save t
                 :immediate-finish nil
                 :kill-buffer t
                 :jump-to-captured t)))

  ;; Also check the commands `denote-link-after-creating',
  ;; `denote-link-or-create'.  You may want to bind them to keys as well.


  ;; If you want to have Denote commands available via a right click
  ;; context menu, use the following and then enable
  ;; `context-menu-mode'.
  (add-hook 'context-menu-functions #'denote-context-menu)

#+end_src

Create [[id:43652950-B9D2-4FAF-8F0C-75D1496E85FE][the =jw-emacs-org.el= section for =org-agenda= --native]] org capture template leveraging the denote format.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  ;; Ensure denote.el is loaded
  (require 'denote)

  (defun jw-denote-weekly-tasks-filename ()
  "Generate a Denote filename for a weekly tasks Org file in a custom directory and ensure the file exists.
  The title is in the format 'YYYY: MONTH DD to DD', where DD to DD represents
  the start and end days of the current week. The filename follows the Denote
  convention with the '__tasks' tag."
  (let* ((custom-directory "~/Otzar/Docs/agenda/")  ; Specify your custom directory here
          (today (current-time))
          ;; Calculate the start of the week (assuming Monday as the first day)
          (start-of-week (time-subtract today (days-to-time (mod (nth 6 (decode-time today)) 7))))
          ;; Calculate the end of the week (Sunday)
          (end-of-week (time-add start-of-week (days-to-time 6)))
          ;; Format the year and month from the start of the week
          (year (format-time-string "%Y" start-of-week))
          (month (format-time-string "%B" start-of-week))
          (day-start (format-time-string "%d" start-of-week))
          (day-end (format-time-string "%d" end-of-week))
          ;; Create the title in the format "YYYY MONTH DD to DD"
          (title (format "%s: %s %s to %s" year month day-start day-end))
          ;; Generate the slug for the title
          (slug (denote-sluggify-title title))
          ;; Generate the timestamp for the Denote filename
          (timestamp (format-time-string "%Y%m%dT%H%M%S" start-of-week))
          ;; Construct the full filename with Denote convention
          (filename (format "%s--%s__tasks.org" timestamp slug)))
      ;; Ensure the custom directory exists
      (make-directory custom-directory t)
      ;; Generate the full file path
      (let ((full-path (expand-file-name filename custom-directory)))
      ;; Create an empty file with Denote metadata if it doesn't exist
      (unless (file-exists-p full-path)
          (with-temp-buffer
            (insert (format "#+title:      %s\n#+date:       %s\n#+filetags:   :tasks:\n#+identifier: %s\n\n"
                          title
                          (format-time-string "[%Y-%m-%d %a %H:%M]" today)
                          timestamp))
          (write-file full-path)))
      full-path)))

  ;; Define the Org capture template
  (setq org-capture-templates
      '(("w" "Weekly Tasks" entry
          (file jw-denote-weekly-tasks-filename)
          ""
          :empty-lines 1
          )))


#+end_src


*** clean directories

Move the =#<FILE>#= to a temporary directory instead of root directory.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  (setq lock-file-name-transforms
      '(("\\`/.*/\\([^/]+\\)\\'" "/var/tmp/\\1" t)))

#+end_src

*** The =jw-emacs-information-management.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-information-management.el" :mkdirp yes

  (provide 'jw-emacs-information-management)

#+end_src

** The =jw-emacs-productivity.el= module

*** pdf-tools.el

Make sure to run =M-x pdf-tools-install= after installation.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-productivity.el" :mkdirp yes

  (use-package pdf-tools
    :straight t
    :config
    (pdf-tools-install)
    :hook (pdf-view-mode . (lambda () 
                         (display-line-numbers-mode -1)
                         (message "PDF Tools activated for this buffer"))))


#+end_src

**** issues

***** 2025-01-15: works

The issue with the **2025-01-14** is that if the installation works within the command line, when opening up a pdf file on Emacs would lead to the epdfserver crashing. This issue I found had to do with confict with =macports= being installed. If you uninstall macports, then the issue is resolved. 

***** 2025-01-14: !working

If you receive the option to rebuild the =epdfserver= and you agree to building on Emacs, there are instances where the build fails. When running =M-x pdf-tools-install= you will rebuild within Emacs and will obtain more information. If the error consists of not being able to find poppler, copy and paste the command used to run the installation and run it in the command line outside of emacs.


*** org-noter.el and org-pdftools.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-productivity.el" :mkdirp yes


  ;; Ensure org-noter is installed
  (use-package org-noter
    :straight t
    :after (org pdf-tools)
    :config
    (setq org-noter-always-create-frame nil))

  ;; Ensure org-pdftools is set up to work with org-mode
  (use-package org-pdftools
    :straight t
    :hook (org-mode . org-pdftools-setup-link))

  ;; Configure org-noter-pdftools
  (use-package org-noter-pdftools
    :after (org-noter pdf-tools)
    :config
    ;; Add a function to ensure precise note is inserted
    (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
      (interactive "P")
      (org-noter--with-valid-session
       (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                     (not org-noter-insert-note-no-questions)
                                                   org-noter-insert-note-no-questions))
             (org-pdftools-use-isearch-link t)
             (org-pdftools-use-freepointer-annot t))
         (org-noter-insert-note (org-noter--get-precise-info)))))

    ;; Fix for the specific issue
    (defun org-noter-set-start-location (&optional arg)
      "When opening a session with this document, go to the current location.
    With a prefix ARG, remove start location."
      (interactive "P")
      (org-noter--with-valid-session
       (let ((inhibit-read-only t)
             (ast (org-noter--parse-root))
             (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
         (with-current-buffer (org-noter--session-notes-buffer session)
           (org-with-wide-buffer
            (goto-char (org-element-property :begin ast))
            (if arg
                (org-entry-delete nil org-noter-property-note-location)
              (org-entry-put nil org-noter-property-note-location
                             (org-noter--pretty-print-location location))))))))

    ;; Add a hook for pdf-annot
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note))

    ;; If you are working with EPUB files
    (use-package nov
      :straight t)

    ;; If you are working with DJVU files
    (use-package djvu
      :straight t))

#+end_src


*** The =jw-emacs-productivity.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-productivity.el" :mkdirp yes

  (provide 'jw-emacs-productivity)

#+end_src


** The =jw-emacs-development.el= module
*** tramp.el --native

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (use-package tramp
    :straight t)
  (setq tramp-default-method "ssh")
  ;; for debugging
  (setq tramp-verbose 3)
  ;; some basic performance enhancements
  (setq remote-file-name-inhibit-locks t
      tramp-use-scp-direct-remote-copying t
      remote-file-name-inhibit-auto-save-visited t)
  ;; disable backup files for tramp
  (add-to-list 'backup-directory-alist
              (cons tramp-file-name-regexp nil))

  (setq tramp-connection-timeout 10) ;; 10 sec timeout
#+end_src


**** direct async

Guide by [[https://coredumped.dev/2025/06/18/making-tramp-go-brrrr./][this blog post]]. 

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (connection-local-set-profile-variables
  'remote-direct-async-process
  '((tramp-direct-async-process . t)))

  (connection-local-set-profiles
  '(:application tramp :protocol "scp")
  'remote-direct-async-process)

  (setq magit-tramp-pipe-stty-settings 'pty)


#+end_src

**** fixing remote compile

=compile= command disables remote ssh connection sharing, which will require you to reenter your password each time you connect. Want to enable this for convienence.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (with-eval-after-load 'tramp
  (with-eval-after-load 'compile
      (remove-hook 'compilation-mode-hook #'tramp-compile-disable-ssh-controlmaster-options)))

#+end_src

**** caching

Cache passwords until the end of the emacs session, which is default.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (setq password-cache-expiry nil)

#+end_src

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

    ;; Configure TRAMP to use ~/.emacs.d/tmp/ for caching
    (let ((tramp-tmp-dir (expand-file-name "tmp/" user-emacs-directory)))
    ;; Ensure the directory exists
    (unless (file-directory-p tramp-tmp-dir)
        (make-directory tramp-tmp-dir t))

    ;; Set TRAMP cache directory
    (setq tramp-persistency-file-name (expand-file-name "tramp-cache" tramp-tmp-dir))

    ;; Set auto-save directory for remote files
    (setq tramp-auto-save-directory tramp-tmp-dir)

    ;; Optional: Set backup directory for remote files to tmp as well
    (setq tramp-backup-directory-alist `(("." . ,tramp-tmp-dir))))

    ;; Enable persistent caching
    (setq tramp-cache-read-persistent-data t)
    (setq tramp-cache-compress t)
    (setq remote-file-name-inhibit-cache nil)

    (defun memoize-remote (key cache orig-fn &rest args)
    "Memoize a value if the key is a remote path."
    (if (and key
            (file-remote-p key))
        (if-let ((current (assoc key (symbol-value cache))))
            (cdr current)
            (let ((current (apply orig-fn args)))
            (set cache (cons (cons key current) (symbol-value cache)))
            current))
        (apply orig-fn args)))

#+end_src


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

    ;; Memoize current project
    (defvar project-current-cache nil)
    (defun memoize-project-current (orig &optional prompt directory)
    (memoize-remote (or directory
                        project-current-directory-override
                        default-directory)
                    'project-current-cache orig prompt directory))
    (advice-add 'project-current :around #'memoize-project-current)

    ;; Memoize magit top level
    (defvar magit-toplevel-cache nil)
    (defun memoize-magit-toplevel (orig &optional directory)
    (memoize-remote (or directory default-directory)
                    'magit-toplevel-cache orig directory))
    (advice-add 'magit-toplevel :around #'memoize-magit-toplevel)

    ;; memoize vc-git-root
    (defvar vc-git-root-cache nil)
    (defun memoize-vc-git-root (orig file)
    (let ((value (memoize-remote (file-name-directory file) 'vc-git-root-cache orig file)))
        ;; sometimes vc-git-root returns nil even when there is a root there
        (when (null (cdr (car vc-git-root-cache)))
        (setq vc-git-root-cache (cdr vc-git-root-cache)))
        value))
    (advice-add 'vc-git-root :around #'memoize-vc-git-root)

    ;; memoize all git candidates in the current project
    (defvar $counsel-git-cands-cache nil)
    (defun $memoize-counsel-git-cands (orig dir)
    ($memoize-remote (magit-toplevel dir) '$counsel-git-cands-cache orig dir))
    (advice-add 'counsel-git-cands :around #'$memoize-counsel-git-cands)

    ;; Optional: Function to clear cache when needed
    (defun jw/clear-tramp-cache ()
    "Clear TRAMP cache files in ~/.emacs.d/tmp/"
    (interactive)
    (let ((cache-file tramp-persistency-file-name))
        (when (file-exists-p cache-file)
        (delete-file cache-file)
        (message "TRAMP cache cleared"))))

#+end_src

*** project.el  --native

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (require 'project)

#+end_src


Set the project paths, but currently the code below only works for =emacs 30+=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes
   (defun jw/project-prompter ()
        (read-file-name "Select a project folder:"
                        "~/Otzar/Projects/Code/"
                        nil
                        nil
                        nil
                        #'file-directory-p))
   (setq project-prompter #'jw/project-prompter)

#+end_src

*** visualizing delimiters

=show-paren-mode= allows one to see matching pairs of parentheses and other characters. When point is on the opening character of one of the paired characters, the other is highlighted. When the point is after the closing character of one of the paired characters, the other is highlighted. 

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (show-paren-mode 1)

#+end_src

To visualize all delimiters,

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** electric-pair-mode.el --native

=electric-pair-mode= will auto pair delimiters for you. One issue with the auto pairing is the =<= character in =org-mode=. The following hook to the enabling of =electric-pair-mode= aims to solve the issue when in =org-mode=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (electric-pair-mode t)

  (add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

#+end_src

*** evil-surround.el

=evil-surround= emulates [[https://github.com/tpope/vim-surround][surround.vim]]. For usage instructions visit [[https://github.com/emacs-evil/evil-surround][evil-surround]]

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (use-package evil-surround
    :straight t
    :config
    (global-evil-surround-mode 1))

#+end_src

*** command-log-mode.el

For logging keys,

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame. Great for live streams and screencasts!


#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (use-package command-log-mode)

#+end_src

To activate =command-log-mode= you must first run =M-x global-command-log-mode= to have =command-log-mode= in every buffer and then run =M-x clm/toggle-command-log-buffer= to have the buffer be displayed.

*** The =jw-emacs-development.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-development.el" :mkdirp yes

  (provide 'jw-emacs-development)

#+end_src

** The =jw-emacs-which-key.el= module

There is a user option in my setup to load this module ([[https://protesilaos.com/emacs/dotemacs#h:24324854-1f8c-4d8b-aa7c-291de968cbf4][The init.el option to enable which-key]]).

When the =which-key-mode= is enabled, any incomplete key sequence will produce a popup at the lower part of the Emacs frame showing keys that complete the current sequence together with the name of the command they are invoking.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-which-key.el" :mkdirp yes

  (use-package which-key
    :straight t
    :hook (after-init . which-key-mode)
    :config
    (setq which-key-separator "  ")
    (setq which-key-prefix-prefix "... ")
    (setq which-key-max-display-columns 3)
    (setq which-key-idle-delay 1.5)
    (setq which-key-idle-secondary-delay 0.25)
    (setq which-key-add-column-padding 1)
    (setq which-key-max-description-length 40))

  (provide 'jw-emacs-which-key)

#+end_src

** The =jw-emacs-ai.el= module

The purpose of this module is to have my integrations with llms or other ai models.


*** gptel.el

Incorporates the use of llms in the emacs client. For a great summary of the features please see [[https://www.blogbyben.com/2024/08/gptel-mindblowing-integration-between.html][Ben Simon's video]]. For accessing the source code please see [[https://github.com/karthink/gptel][karthink's repo]].

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-ai.el" :mkdirp yes

  (use-package gptel
    :straight t
    :after auth-source
    :init
    ;; Ensure auth-source is configured to find ~/.authinfo or ~/.authinfo.gpg
    (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
    :config
    ;; Helper function to read file contents
    (defun gptel-read-file (file-path)
        "Read the contents of FILE-PATH into a string, trimming whitespace."
        (if (and (file-exists-p file-path) (file-readable-p file-path))
            (with-temp-buffer
            (insert-file-contents file-path)
            (string-trim (buffer-string)))
        (progn
            (message "Warning: File %s is not readable or does not exist" file-path)
            "You are a polymath who is a helpful assistant. Respond concisely and accurately.")))

    ;; Define directives with file paths
    (setq gptel-directives
            (list
            (cons 'default "You are a polymath who is a helpful assistant. Respond concisely and accurately.")
            (cons 'coding (gptel-read-file "~/.dotfiles/.assets/gpt-prompts/coding.txt"))
            (cons 'writing (gptel-read-file "~/.dotfiles/.assets/gpt-prompts/writing.txt"))
            (cons 'research (gptel-read-file "~/.dotfiles/.assets/gpt-prompts/research.txt"))))

    ;; Set default directive
    (setq gptel-default-directive 'coding)

    
    ;; Refresh directives dynamically
    (defun gptel-refresh-directives ()
        "Refresh gptel-directives by re-reading files."
        (interactive)
        (setq gptel-directives
            (list
            (cons 'default "You are a polymath who is a helpful assistant. Respond concisely and accurately.")
            (cons 'coding (gptel-read-file "~/.dotfiles/.assets/gpt-prompts/coding.txt"))
            (cons 'writing (gptel-read-file "~/.dotfiles/.assets/gpt-prompts/writing.txt"))
            (cons 'research (gptel-read-file "~/.dotfiles/.assets/gpt-prompts/research.txt"))))
        (message "Refreshed gptel-directives from files."))

    ;; Set OpenAI API key using gptel-api-key-from-auth-source
    (setq gptel-api-key (lambda ()
                          (auth-source-forget-all-cached)
                          (gptel-api-key-from-auth-source)))
    ;; Configure Google (Gemini) backend
    (gptel-make-gemini "Gemini" :stream t
                        :key (lambda ()
             (auth-source-forget-all-cached)
             (gptel-api-key-from-auth-source "generativelanguage.googleapis.com")))
    ;; Configure Anthropic (Claude) backend
    (gptel-make-anthropic "Claude"
      :stream t
      :key (lambda ()
             (auth-source-forget-all-cached)
             (gptel-api-key-from-auth-source "console.anthropic.com")))
    ;; Optional: Enable debugging for auth-source issues
    ;; (setq auth-source-debug t)
  )

(setq gptel-display-buffer-action
      '(display-buffer-in-side-window
        (side . right)
        (window-width . 0.4)))

#+end_src

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-ai.el" :mkdirp yes

    (defun gptel-save-response ()
    "Save the entire gptel buffer to a file with a user-provided name."
    (interactive)
    (unless (bound-and-true-p gptel-mode)
        (user-error "This command must be run in a gptel-mode buffer"))
    (let* ((response (buffer-string))
            (user-input (read-string "Enter a concise (2-5 words) filename description: ")))
        (if (string-empty-p response)
            (message "Error: Buffer is empty, cannot save file")
        (let* ((clean-name (if (and user-input (stringp user-input) (not (string-empty-p user-input)))
                                (string-trim (replace-regexp-in-string "[^a-zA-Z0-9-]" "" (replace-regexp-in-string "\\s+" "-" user-input)))
                            "fallback-name"))
                (timestamp (format-time-string "%Y%m%dT%H%M%S"))
                (base-dir "~/Otzar/llm-outputs/")
                (filename (concat (file-name-as-directory (expand-file-name base-dir)) timestamp "--" clean-name ".md")))
            (condition-case err
                (progn
                (make-directory base-dir t)
                (write-region (point-min) (point-max) filename nil 'silent)
                (message "Saved buffer to %s" filename))
            (error
            (message "Error saving file: %s" err)))))))


#+end_src


*** The =jw-emacs-ai.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-ai.el" :mkdirp yes

  (provide 'jw-emacs-ai)

#+end_src

** The =jw-emacs-langs.el= module

*** treesitter

Set language sources for treesit

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (setq treesit-language-source-alist
        '((typescript .        ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")
          (toml "https://github.com/tree-sitter/tree-sitter-toml")
          (make "https://github.com/alemuller/tree-sitter-make")
          (markdown "https://github.com/ikatyang/tree-sitter-markdown")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (cmake "https://github.com/uyha/tree-sitter-cmake")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          (r "https://github.com/r-lib/tree-sitter-r")
          (bash "https://github.com/tree-sitter/tree-sitter-bash")
          ))

  (dolist (source treesit-language-source-alist)
    (unless (treesit-ready-p (car source))
      (treesit-install-language-grammar (car source))))

  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.c\\'" . c-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.mdx\\'" . markdown-mode))
  (add-to-list 'major-mode-remap-alist '(
                                         (python-mode . python-ts-mode)
                                         (json-mode . json-ts-mode)
                                         (css-mode . css-ts-mode)
                                         (bash-mode . bash-ts-mode)
                                         (yaml-mode . yaml-ts-mode)
                                         (c++-mode . c++-ts-mode)
                                         (c-mode . c-ts-mode)
                                         ))
#+end_src


The issue with the built in =treesit.el= is that it does not auto default to which language server. In addition if you need to install you will have to input the url yourself. This package is here to automate the process.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (use-package treesit-auto
    :straight t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))

#+end_src

Auto install grammars when missing

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (setq treesit-auto-install 'prompt)

#+end_src


*** latex

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

(use-package auctex
  :straight t
  :defer t
  :init
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-PDF-mode t) ; Enable PDF output by default
  :config
  ;; Set the default engine
  (setq TeX-engine 'default)
  
  ;; Put auxiliary files in a tmp subdirectory
  (setq TeX-output-dir "tmp/")
  (setq LaTeX-output-directory "tmp/")
  
  ;; Simplified PDF viewer configuration for macOS
  (when (eq system-type 'darwin) ; macOS only
    (setq TeX-view-program-list '(("Preview" "open -a Preview %o")))
    (setq TeX-view-program-selection '((output-pdf "Preview"))))
  
  ;; For non-macOS systems, use default viewer
  (unless (eq system-type 'darwin)
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))))
  
  ;; Ensure we have a default command
  (setq TeX-command-default "LaTeX")
  
  ;; Auto-revert PDF files when they change
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
  
  ;; LaTeX mode hooks
  (add-hook 'LaTeX-mode-hook 'visual-line-mode) ; Enable word wrap
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)    ; Enable spell checking
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)  ; Enable math mode
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; Enable RefTeX
  
  ;; Ensure TeX-command-run-all works properly
  (add-hook 'LaTeX-mode-hook 
            (lambda ()
              ;; Make sure the master file is set
              (when (and (buffer-file-name)
                         (not TeX-master))
                (setq-local TeX-master (file-name-sans-extension
                                       (file-name-nondirectory (buffer-file-name)))))))
  
  ;; RefTeX configuration
  (setq reftex-plug-into-AUCTeX t))


#+end_src

*** python

Configuring pythone envs with =conda=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

(use-package conda
  :straight t
  :config
  (setq conda-anaconda-home (expand-file-name "/opt/homebrew/Caskroom/miniconda/base/"))
  (setq conda-env-home-directory (expand-file-name "/opt/homebrew/Caskroom/miniconda/base/envs/"))
  (conda-env-autoactivate-mode t))


#+end_src


Python formatter configuration.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (use-package python-black
    :demand t
    :after python
    :hook (python-ts-mode . python-black-on-save-mode))

#+end_src


*** astro.js

I used the [[https://medium.com/@jrmjrm/configuring-emacs-and-eglot-to-work-with-astro-language-server-9408eb709ab0][following guide]] from medium for this configuration.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

    ;; WEB MODE
    (use-package web-mode
    :straight t)

    ;; astro
    ;; ASTRO
    (define-derived-mode astro-mode web-mode "astro")
    (setq auto-mode-alist
        (append '((".*\\.astro\\'" . astro-mode))
                auto-mode-alist))
  

#+end_src

Now set the config in [[id:F9D087EE-895F-4DBC-BBCF-3056A2A5266E][eglot]].  


*** rust

Download =rust-mode=.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

    (use-package rust-mode
    :straight t
    :mode "\\.rs\\'"
    :config
    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode)))

#+end_src

Setting up =rust-mode=.

Custom function to find rust analyzer.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (defun jw/find-rust-analyzer ()
    (or (executable-find "rust-analyzer")
        (expand-file-name "~/.cargo/bin/rust-analyzer")))

#+end_src


*** typescript

Typescript support is done through =treesit.el=, which is now native to emacs as of v29.

Therefore all of the typescript will be using the tree-sitter equivalent.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  ;; (use-package typescript-mode
  ;; :ensure t
  ;; :mode "\\.ts\\'")

#+end_src

Install =json-mode=

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  ;; (use-package json-mode
  ;; :ensure t
  ;; :mode "\\.json\\'")

#+end_src


*** apheleia.el

Make sure you have the necessary packages installed.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (use-package apheleia
    :straight t
    :config
    (setf (alist-get 'prettier-json apheleia-formatters)
        '("prettier" "--stdin-filepath" filepath))
    ;; Map json-ts-mode to the prettier-json formatter
    (setf (alist-get 'json-ts-mode apheleia-mode-alist)
        '(prettier-json))
    (add-to-list 'apheleia-mode-alist '(tsx-ts-mode . prettier))
    (add-to-list 'apheleia-mode-alist '(typescript-ts-mode . prettier))
    (add-to-list 'apheleia-mode-alist '(c++-ts-mode . clang-format))
    (add-to-list 'apheleia-mode-alist '(c-ts-mode . clang-format))
    (apheleia-global-mode +1))

#+end_src


*** eglot.el --native
:PROPERTIES:
:ID:       F9D087EE-895F-4DBC-BBCF-3056A2A5266E
:END:

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

    ;; Dynamic server program functions
    (defun jw/python-lsp-program (&optional interactive)
    "Get Python LSP program."
    (if (file-remote-p default-directory)
        '("/home/jozhw/bin/pylsp-wrapper")
        '("/opt/homebrew/Caskroom/miniconda/base/bin/pyright-langserver" "--stdio")))

        (defun jw/rust-lsp-program (&optional interactive)
        "Get Rust LSP program."
        (list (jw/find-rust-analyzer)))

        (defun jw/clangd-lsp-program (&optional interactive)
        "Get clangd LSP program."
        '("clangd"))

        (defun jw/typescript-lsp-program (&optional interactive)
        "Get TypeScript LSP program."
        '("typescript-language-server" "--stdio"))

        (defun jw/marksman-lsp-program (&optional interactive)
        "Get Marksman LSP program."
        '("marksman"))

        (defun jw/astro-lsp-program (&optional interactive)
        "Get Astro LSP program."
        '("astro-ls" "--stdio" :initializationOptions (:typescript (:tsdk "./node_modules/typescript/lib"))))


#+end_src

Add to =eglot= server list and setup hook after eglot is loaded.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

    ;; Enhanced eglot configuration
    (with-eval-after-load 'eglot
    (setq eglot-prefer-local-server t)
    ;; undo elgot modifications of completion-category-defaults
    (setq completion-category-defaults nil)
    (setq eglot-connect-timeout 120)

    ;; Use function symbols - eglot will call these functions to get the command
    (add-to-list 'eglot-server-programs
                '(python-ts-mode . jw/python-lsp-program))
    (add-to-list 'eglot-server-programs
                '(rust-mode . jw/rust-lsp-program))
    (add-to-list 'eglot-server-programs 
                '((c++-ts-mode c-ts-mode) . jw/clangd-lsp-program))
    (add-to-list 'eglot-server-programs
                '(typescript-ts-mode . jw/typescript-lsp-program))
    (add-to-list 'eglot-server-programs
                '(tsx-ts-mode . jw/typescript-lsp-program))
    (add-to-list 'eglot-server-programs 
                '(markdown-mode . jw/marksman-lsp-program))
    (add-to-list 'eglot-server-programs 
                '(astro-mode . jw/astro-lsp-program)))

#+end_src

Function to start eglot.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  ;; Function to start eglot
    (defun jw/maybe-start-eglot ()
    "Start eglot if current mode is supported and file is not remote."
    (when (and (not (file-remote-p default-directory))
                (or (derived-mode-p 'python-mode)
                    (derived-mode-p 'python-ts-mode)
                    (derived-mode-p 'rust-mode)
                    (derived-mode-p 'c-ts-mode)
                    (derived-mode-p 'c++-ts-mode)
                    (derived-mode-p 'typescript-ts-mode)
                    (derived-mode-p 'tsx-ts-mode)
                    (derived-mode-p 'markdown-mode)
                    (derived-mode-p 'astro-mode)))
        (eglot-ensure)))

  ;; Helper function to restart eglot in current buffer
  (defun jw/restart-eglot ()
    "Restart eglot in current buffer."
    (interactive)
    (when (eglot-current-server)
      (eglot-shutdown (eglot-current-server))
      (eglot-ensure)))

#+end_src

Add the hook to auto start =eglot= depending on configured language.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (add-hook 'python-ts-mode-hook #'jw/maybe-start-eglot)
  (add-hook 'rust-mode-hook #'jw/maybe-start-eglot)
  (add-hook 'c-ts-mode-hook #'jw/maybe-start-eglot)
  (add-hook 'c++-ts-mode-hook #'jw/maybe-start-eglot)
  (add-hook 'typescript-ts-mode-hook #'jw/maybe-start-eglot)
  (add-hook 'tsx-ts-mode-hook #'jw/maybe-start-eglot)
  (add-hook 'markdown-mode-hook #'jw/maybe-start-eglot)
  (add-hook 'astro-mode-hook #'jw/maybe-start-eglot)

#+end_src


*** dape.el

For debuggin,

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (use-package dape
    :straight t
    ;; :preface
    ;; By default dape shares the same keybinding prefix as `gud'
    ;; If you do not want to use any prefix, set it to nil.
    ;; (setq dape-key-prefix "\C-x\C-a")

    :hook
    ;; Save breakpoints on quit
    (kill-emacs . dape-breakpoint-save)
    ;; Load breakpoints on startup
    ;; (after-init . dape-breakpoint-load)

    :config
    ;; Turn on global bindings for setting breakpoints with mouse
    ;; (dape-breakpoint-global-mode)

    ;; Info buffers to the right
    (setq dape-buffer-window-arrangement 'right)

    ;; Info buffers like gud (gdb-mi)
    (setq dape-buffer-window-arrangement 'gud)
    (setq dape-info-hide-mode-line nil)

    ;; Pulse source line (performance hit)
    (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)

    ;; Showing inlay hints
    (setq dape-inlay-hints t)

    ;; Save buffers on startup, useful for interpreted languages
    (add-hook 'dape-start-hook (lambda () (save-some-buffers t t)))

    ;; Kill compile buffer on build success
    (add-hook 'dape-compile-hook 'kill-buffer)

    ;; Projectile users
    ;; (setq dape-cwd-function 'projectile-project-root)
    )

  ;; Enable repeat mode for more ergonomic `dape' use
  (use-package repeat
    :config
    (repeat-mode))

#+end_src


*** tramp-sh.el

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  ;; for remote configs
  (with-eval-after-load 'tramp
    (require 'tramp-sh)
    (setq tramp-own-remote-path '("/bin" "/usr/bin" "/usr/local/bin"))
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path))

#+end_src


*** The =jw-emacs-langs.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-emacs-modules/jw-emacs-langs.el" :mkdirp yes

  (provide 'jw-emacs-langs)

#+end_src

* The custom libraries of my Emacs configuration (=jw-lisp/=)
** The =jw-copy.el= library

*** jw-dired-get-file-path

Copy file path.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-lisp/jw-copy.el" :mkdirp yes
  (defun jw-dired-get-file-path ()
    "Get the full path of the file at point in Dired mode and display it in the minibuffer."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (message file)
      (kill-new file)))

  (define-key dired-mode-map (kbd "C-c p") 'jw-dired-get-file-path)

#+end_src

*** jw-copy-file

Copy a file.

#+begin_src emacs-lisp :tangle ".emacs.d/jw-lisp/jw-copy.el" :mkdirp yes

  (defun jw-copy-file (source-file destination-file)
    "Copy a file from SOURCE-FILE to DESTINATION-FILE."
    (interactive "FSource file: \nFDestination file: ")
    (if (file-exists-p source-file)
        (let ((dest-dir (file-name-directory destination-file)))
          (if (file-exists-p dest-dir)
              (if (not (file-exists-p destination-file))
                  (progn
                    (copy-file source-file destination-file)
                    (message "File copied successfully."))
                (message "Destination file already exists. Choose another destination."))
            (message "Destination directory does not exist.")))
      (message "Source file does not exist.")))

#+end_src

*** The =jw-copy.el= call to provide

#+begin_src emacs-lisp :tangle ".emacs.d/jw-lisp/jw-copy.el" :mkdirp yes

  (provide 'jw-copy)

#+end_src

