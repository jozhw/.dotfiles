#+title: Emacs Configuration

* Getting Started

This org file is used to set up my emacs configuration. The code blocks of this org file
will be executed using =org-babel-tangle=. Thus, to initiate you must use =M-x ^org-babel-tangle= or use the key-binding =C-c C-v t=.

** Configure Tangle
The following line =#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el :mkdirp yes= cause the tangle command to compile and save the code blocks in the =.emacs.d/init.el= file.

#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el :mkdirp yes

** Structured Templates

These structured templates are used to auto generate code blocks for org mode. In order
to use the template simply type =<= followed by the abbreviation of the language and
hit the =TAB= button. For example, the python snippit would be =<py TAB=.

#+begin_src emacs-lisp

;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Emacs.org Organization

Since the compilation is sequential, you have to be careful in that =jw/leader-key-def= was defined in the *Keyboard Bindings* section and it is used in the *General Configuration* section under *Text Scaling* where =hydra= was used. This means that *Key Bindings* must be before the *Text Scaling* otherwise there will be a void error.

* Running Emacs
** Command Line (terminal)

To run emacs in the command-line/terminal simply use the following command while in your command-line/terminal: =emacs -nw=.

** Graphical User Interface
*** Set Window Size to Full

#+begin_src emacs-lisp

  (if (display-graphic-p)
      (progn
        (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
        (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
        (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
        (add-to-list 'default-frame-alist '(fullscreen . maximized))))

#+end_src

*** Increase Font Size

#+begin_src emacs-lisp

  (if (display-graphic-p)
      (progn
        (set-face-attribute 'default nil :height 180)))

#+end_src

* Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

Also, turn on =lexical-binding= for the init file!

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

* Package System 
** Setup 
*** Use-package (native)

[[https://github.com/jwiegley/use-package][use-package]] is a native package built into emacs since =v29.0.0= and is used in this configuration to make it a lot easier to automate the installation and configuration of everything else.
 
#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (setq use-package-always-ensure t)

#+end_src

**** Debugging

To debug =use-package= run =emacs --debug-init=.

#+begin_src emacs-lisp
  (if init-file-debug
      (setq use-package-verbose t
            use-package-expand-minimally nil
            use-package-compute-statistics t
            debug-on-error t)
    (setq use-package-verbose nil
          use-package-expand-minimally t))
#+end_src

**** Package Not Found

If you get a package not found error and the package exists, then you can try
refreshing the package contents by running =M-x package-refresh-contents=.

** Removing Packages
*** Use-package (native)

To remove packages that are not used run =M-x use-package-autoremove=. However, the current code only works for packages that have the =:ensure= | =:vc= | =:init= keywords. 

#+begin_src emacs-lisp

  (eval-and-compile
    (defvar use-package-selected-packages nil
     "Explicitly installed packages.")

    (define-advice use-package-handler/:ensure
        (:around (fn name-symbol keyword args rest state) select)
      (let ((items (funcall fn name-symbol keyword args rest state)))
        (dolist (ensure args items)
          (let ((package
                 (or (and (eq ensure t) (use-package-as-symbol name-symbol))
                     ensure)))
            (when package
              (when (consp package)
                (setq package (car package)))
              (push `(add-to-list 'use-package-selected-packages ',package) items))))))

    (define-advice use-package-handler/:vc
        (:around (fn name-symbol &rest rest) select)
      (cons `(add-to-list 'use-package-selected-packages ',name-symbol)
            (apply fn name-symbol rest))))

  (define-advice use-package-handler/:init
    (:around (fn name-symbol keyword args rest state) select)
  (let ((items (funcall fn name-symbol keyword args rest state)))
    (dolist (init args items)
      (push `(add-to-list 'use-package-selected-packages ',name-symbol) items))))

  (defun use-package-autoremove ()
  "Autoremove packages not used by use-package."
  (interactive)
  (let ((package-selected-packages use-package-selected-packages))
    (package-autoremove)))

#+end_src

* Keyboard Bindings
** ESC Cancels All

Bind the quit prompting function to the =esc= key.

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Simplify Leader Bindings 
*** General.el

[[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings, especially
in conjunction with Evil modes.

#+begin_src emacs-lisp

  (use-package general
    :ensure t
    :config
    (general-create-definer jw/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src

** User Interface Toggles

#+begin_src emacs-lisp

  (jw/leader-key-def
    "t"  '(:ignore t :which-key "toggles")
    "tw" 'whitespace-mode
    )

#+end_src

** Let's Be Evil

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

#+end_src

* General Configuration
** Emacs
#+begin_src emacs-lisp

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :init
    ;; TAB cycle if there are only few candidates
    ;; (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    ;; (setq tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (setq text-mode-ispell-word-completion nil)

    ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
    ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
    ;; setting is useful beyond Corfu.
    (setq read-extended-command-predicate #'command-completion-default-include-p))

#+end_src

** User Interface

For a minimalistic UI, the startup messages, scroll-bar, tool-bar, tooltip, menu-bar
were all removed from the display.

#+begin_src emacs-lisp

  ;; Disable startup message when emacs starts
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell to be on instead of the beeping
  ;; uncomment below to have the visual bell, otherwise keep the code commented
  ;; (setq visible-bell t)

#+end_src

Set up the visible bell to be on instead of the beeping. For macos it is best to leave commented below to not have the visual bell because it is distracting.
#+begin_src emacs-lisp

  ;; (setq visible-bell t)

#+end_src

*** Line Numbers

Enable line numbers globally, but not in the following modes: org, term, shell, and eshell.

In addition to line numbers, the column number will also be displayed. 

#+begin_src emacs-lisp

  ;; Enable column numbers
  (column-number-mode)

  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

*** Text Scaling
**** Hydra

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (jw/leader-key-def
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Themes
*** Doom
I currently am using the [[https://github.com/hlissner/emacs-doom-themes][DOOM Themes]], specifically =doom-dracula=.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

#+end_src

** Modeline
*** Basic Customization

#+begin_src emacs-lisp

  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)

#+end_src

*** Doom Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

If you are running in the =macos= terminal, then you have to make sure that you set the font to =Droid Sans Mono Nerd Font Complete 18=. You can do this by the following steps:

- Navigate to =Settings=
- Navigate to =Profiles= tab
- Navigate to =Text= subtab
- Under the =Font= menu click on =Change=
- Select the appropriate font


#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

**** Dependencies

=doom-modeline= icons rely on =nerd-icons=. Thus, you must install the =nerd-icons= if you want to use the icons on the modeline.

#+begin_src emacs-lisp

  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )

#+end_src

**** Turn Off Icons

To turn off icons uncomment the following:

#+begin_src emacs-lisp

  ;; (setq doom-modeline-icon nil)

#+end_src

**** Configuration

The following contains configurations of the =doom-modeline=. All the configurations here use the =setq=.

***** Word Counter

#+begin_src emacs-lisp

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count t)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

#+end_src

***** Environment Version

#+begin_src emacs-lisp

  (setq doom-modeline-env-version t)

#+end_src

** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame. Great for live streams and screencasts!


#+begin_src emacs-lisp

  (use-package command-log-mode)

#+end_src

To activate =command-log-mode= you must first run =M-x global-command-log-mode= to have =command-log-mode= in every buffer and then run =M-x clm/toggle-command-log-buffer= to have the buffer be displayed.

** Helpful

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

#+end_src

** Dired

For macos, make sure to have =coreutils= installed. To install run, =brew install coreutils=

#+begin_src emacs-lisp

  (setq insert-directory-program "gls" 
       dired-use-ls-dired t)

  (setq dired-listing-switches "-alD")

#+end_src

* Edit Configuration
** Use Spaces Instead of Tabs for Indentation

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil)

#+end_src
* Completion System
** Preserve Minibuffer History
*** Savehist-mode

#+begin_src emacs-lisp

  (use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))

    ;; Individual history elements can be configured separately
    ;;(put 'minibuffer-history 'history-length 25)
    ;;(put 'evil-ex-history 'history-length 50)
    ;;(put 'kill-ring 'history-length 25))

#+end_src

** Completion 
*** Vertico

#+begin_src emacs-lisp

  (defun jw/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
        (delete-word (- arg))))

  (use-package vertico
    :ensure t
    :bind (:map vertico-map
           ("C-j" . vertico-next)
           ("C-k" . vertico-previous)
           ("C-f" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . jw/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))

#+end_src

** Completions in Region 
*** Corfu

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.8)
    (corfu-popinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert) ; insert previewed candidate
    (corfu-preselect 'prompt)
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
    :bind (:map corfu-map
         ("C-j" . corfu-next)
         ("C-k" . corfu-previous)
         ("C-f" . corfu-insert))
    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

#+end_src

** Completion Interface with Terminal Emacs

Since =corfu.el= does not support running emacs in the terminal, I will just stick with =company.el= instead of =corfu-terminal=.

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.


#+begin_src emacs-lisp

  (unless (display-graphic-p)
      (progn
        ;; Configuration for GUI mode
        (use-package company
          :after eglot
          :hook (eglot--managed-mode . company-mode)
          :bind (:map company-active-map
                 ("<tab>" . company-complete-selection))
                (:map eglot-mode-map
                 ("<tab>" . company-indent-or-complete-common))
          :custom
          (company-minimum-prefix-length 1)
          (company-idle-delay 0.0))
      
        (use-package company-box
          :hook (company-mode . company-box-mode)))
    ;; Configuration for terminal mode (optional)
    ;; Add your terminal mode specific configuration here
    )

#+end_src

** Improved Candidate Filtering 
*** Orderless

#+begin_src emacs-lisp

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

#+end_src

** Completion Annotations
*** Marginalia

Marginalia provides helpful annotations for various types of minibuffer completions. You can think of it as a replacement of =ivy-rich=.

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src
* Org
** Org Mode

Set up Org Mode with a baseline configuration. The following sections will add more things to it.

#+begin_src emacs-lisp

  (defun jw/org-mode-setup ()
    (org-indent-mode) ;; auto-indentation for headings
    (variable-pitch-mode 1) ;; cause fonts to vary by proportionality
    (visual-line-mode 1)) ;; wrap the text so that it does not go out of view

  (use-package org
    :hook (org-mode . jw/org-mode-setup)
    :config
    (setq org-ellipsis " ▾") ;; when org headings closed down arrow instead of ellipsis
    )


#+end_src

*** Tips

To change the view to outline or full view use =SHIFT-TAB= repeatedly for the desired visual look.

To condense or uncondense content under a heading, make sure the cursor is on the same line as the heading and use =TAB= to cycle through uncondensing or condensing the content.

*** User Interface
*** Text Display (visual-fill-column) 

=visual-fill-column= will create a document looking display with the extra padding on the left and on the right.

#+begin_src emacs-lisp

  (defun jw/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . jw/org-mode-visual-fill))

#+end_src

*** Bullets (org-bullets)

Customize the heading bullets to make it consistent and nicer.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** In-line Images

#+begin_src emacs-lisp

  (setq org-image-actual-width nil)
  (setq org-startup-with-inline-images t)
  (add-hook 'org-mode-hook 'org-display-inline-images)

#+end_src

*** Babel
*** Load Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

*** Auto-tangle

This snippet adds a hook to =org-mode= buffers so that =jw/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun jw/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jw/org-babel-tangle-config)))

#+end_src

* Personal Information Management
** Denote
*** Initialization 

#+begin_src emacs-lisp

  (use-package denote
                   :ensure t)

  (setq denote-directory (expand-file-name "~/Otzar/Gnosis/"))
  (setq denote-save-buffer-after-creation nil)

#+end_src

*** Set Tags/Keywords

#+begin_src emacs-lisp

  (setq denote-known-keywords '("theology" "philosophy" "politics" "journal" "analysis" "linguistics"))
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)

#+end_src

*** Rest of Configuration

#+begin_src emacs-lisp

  (setq denote-file-type nil) ; Org is the default, set others here
  (setq denote-prompts '(title keywords))
  (setq denote-excluded-directories-regexp nil)
  (setq denote-excluded-keywords-regexp nil)
  (setq denote-rename-no-confirm nil) ; Set to t if you are familiar with `denote-rename-file'

  ;; Pick dates, where relevant, with Org's advanced interface:
  (setq denote-date-prompt-use-org-read-date t)
  ;; Read this manual for how to specify `denote-templates'.  We do not
  ;; include an example here to avoid potential confusion.
  (setq denote-date-format nil) ; read doc string

  ;; By default, we do not show the context of links.  We just display
  ;; file names.  This provides a more informative view.
  (setq denote-backlinks-show-context t)

  ;; Also see `denote-link-backlinks-display-buffer-action' which is a bit
  ;; advanced.

  ;; If you use Markdown or plain text files (Org renders links as buttons
  ;; right away)
  (add-hook 'find-file-hook #'denote-link-buttonize-buffer)

  (with-eval-after-load 'org-capture
  (setq denote-org-capture-specifiers "%l\n%i\n%?")
  (add-to-list 'org-capture-templates
               '("n" "New note (with denote.el)" plain
                 (file denote-last-path)
                 #'denote-org-capture
                 :no-save t
                 :immediate-finish nil
                 :kill-buffer t
                 :jump-to-captured t)))

  ;; Also check the commands `denote-link-after-creating',
  ;; `denote-link-or-create'.  You may want to bind them to keys as well.


  ;; If you want to have Denote commands available via a right click
  ;; context menu, use the following and then enable
  ;; `context-menu-mode'.
  (add-hook 'context-menu-functions #'denote-context-menu)

#+end_src

** Keep Directories Clean

#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  (setq lock-file-name-transforms
      '(("\\`/.*/\\([^/]+\\)\\'" "/var/tmp/\\1" t)))

#+end_src

* Development
** Language Server Support with Eglot (native)

Undo the Eglot modifications of =completion-category-defaults=.
#+begin_src emacs-lisp

  (with-eval-after-load 'eglot
     (setq completion-category-defaults nil))

#+end_src

** Languages
*** Python

** Project.el (native)

#+begin_src emacs-lisp
  (require 'project)
#+end_src

*** Set Project Paths

Currently the code below only works for =emacs 30+=.

#+begin_src emacs-lisp
  ;; (defun jw/project-prompter ()
  ;;      (read-file-name "Select a project folder:"
  ;;                      "~/Projects/Code/"
  ;;                      nil
  ;;                      nil
  ;;                      nil
  ;;                      #'file-directory-p))
  ;; (setq project-prompter #'jw/project-prompter)

#+end_src

** Git
*** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge)

#+end_src

**** Commands
***** Global Commands

- =C-x g= (=magit-status=): Open Magit status buffer.
- =C-c M-g= (=magit-dispatch-popup=): Open Magit command popup.
- =q= (=magit-mode-quit-window=): Close Magit buffer.
- =C-c M-c= (=magit-commit=): Start commit process.
- =C-c M-p= (=magit-push-popup=): Push changes.
- =C-c M-f= (=magit-pull-popup=): Pull changes.
- =C-c M-b= (=magit-branch-popup=): Manage branches.

***** Status Buffer

- =TAB=: Expand/collapse section.
- =S= (=magit-stage-item=): Stage changes.
- =U= (=magit-unstage-item=): Unstage changes.
- =c= (=magit-commit-popup=): Commit changes.
- =P= (=magit-push-popup=): Push changes.
- =F= (=magit-pull-popup=): Pull changes.
- =b= (=magit-branch-popup=): Manage branches.
- =l l= (=magit-log=): View commit log.
- =r= (=magit-refresh=): Refresh status buffer.
- =d= (=magit-diff-popup=): Show changes.

***** Diff Buffer

- =n= (=magit-section-forward=): Move to the next hunk.
- =p= (=magit-section-backward=): Move to the previous hunk.
- =s= (=magit-stage=): Stage current hunk.
- =u= (=magit-unstage=): Unstage current hunk.
- =C-c C-a= (=magit-diff-show-or-scroll-up=): Scroll up in diff buffer.
- =C-c C-e= (=magit-diff-show-or-scroll-down=): Scroll down in diff buffer.

***** Log Buffer
- =l l= (=magit-log=): Refresh log buffer.
- =RET=: Show details of the commit at point.
- =d= (=magit-diff-visit-file=): Show changes for the commit at point.
- =TAB=: Toggle commit details.

***** Commit Buffer
- =C-c C-c= (=magit-commit=): Finish the commit.
- =C-c C-a= (=magit-commit-ammend=): Amend the last commit.

***** Branch Popup
- =b c= (=magit-branch-create=): Create a new branch.
- =b k= (=magit-branch-delete=): Delete a branch.
- =b m= (=magit-branch-move=): Rename a branch.
- =b r= (=magit-branch-rename=): Rename the current branch.
- =b c= (=magit-branch-checkout=): Checkout a branch.
  
** Productivity
*** Visualizing Delimiters
**** Show Parent (native)

=show-paren-mode= allows one to see matching pairs of parentheses and other characters. When point is on the opening character of one of the paired characters, the other is highlighted. When the point is after the closing character of one of the paired characters, the other is highlighted. 

#+begin_src emacs-lisp

  (show-paren-mode 1)

#+end_src
**** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** Pairing Delimiters
**** Eletric Pair (native)

=electric-pair-mode= will auto pair delimiters for you. One issue with the auto pairing is the =<= character in =org-mode=. The following hook to the enabling of =electric-pair-mode= aims to solve the issue when in =org-mode=.

#+begin_src emacs-lisp

  (electric-pair-mode t)

  (add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

#+end_src

**** Evil Surround

=evil-surround= emulates [[https://github.com/tpope/vim-surround][surround.vim]]. For usage instructions visit [[https://github.com/emacs-evil/evil-surround][evil-surround]]

#+begin_src emacs-lisp

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

#+end_src

* Archive
** Projectile
*** Rationale

The reason why =projectile= is archived is because I want to utilize the built in emacs package =project.el=. Additionally, my previous configuration utilized =ivy= and currently I am not using it for my completion system. I have also noticed that =project.el= encountered significant amount of lag when changing to a project file, thus to mitigate that lag, I have decided to switch away from =projectile=. Note, there are amazing features that =projectile= offers, however I do not use them, so I see no point in using =projectile= anymore. 

*** Code
**** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  ;; (use-package projectile
  ;;   :diminish projectile-mode
  ;;   :config (projectile-mode)
  ;;   :custom ((projectile-completion-system 'ivy))
  ;;   :bind-keymap
  ;;   ("C-c p" . projectile-command-map)
  ;;   :init
  ;;   ;; NOTE: Set this to the folder where you keep your Git repos!
  ;;   (when (file-directory-p "~/projects-code")
  ;;     (setq projectile-project-search-path '("~/projects-code")))
  ;;   (setq projectile-switch-project-action #'projectile-dired))

  ;; (use-package counsel-projectile
  ;;   :config (counsel-projectile-mode))

#+end_src

**** Bindings

#+begin_src emacs-lisp

  ;; (jw/leader-key-def
  ;;   "pf"  'projectile-find-file
  ;;   "ps"  'projectile-switch-project
  ;;   "pp"  'projectile-find-file
  ;;   "pc"  'projectile-compile-project
  ;;   "pd"  'projectile-dired)

#+end_src

** Which-key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix. For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  ;; (use-package which-key
  ;;   :init (which-key-mode)
  ;;   :diminish which-key-mode
  ;;   :config
  ;;   (setq which-key-idle-delay 1))

#+end_src

** Org-roam
*** Installation

#+begin_src emacs-lisp

  ;; (use-package org-roam
  ;;   :ensure t
  ;;   :custom
  ;;   (org-roam-directory (file-truename "~/OrgRoamTest/"))
  ;;   :bind (("C-c n l" . org-roam-buffer-toggle)
  ;;          ("C-c n f" . org-roam-node-find)
  ;;          ("C-c n g" . org-roam-graph)
  ;;          ("C-c n i" . org-roam-node-insert)
  ;;          ("C-c n c" . org-roam-capture)
  ;;          ;; Dailies
  ;;          ("C-c n j" . org-roam-dailies-capture-today))
  ;;   :config
  ;;   ;; If you're using a vertical completion framework, you might want a more informative completion interface
  ;;   (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  ;;   (org-roam-db-autosync-mode)
  ;;   ;; If using org-roam-protocol
  ;;   (require 'org-roam-protocol))

#+end_src

*** Switching Zettlekasten

Code taken and adjusted for my usecase from [[https://www.reddit.com/r/emacs/comments/135dhh5/code_snippet_to_switch_between_multiple/][@SnooPets20's post.]]

The idea of this switching is to maximize the utility of =org-roam=. In some cases, especially when learning new things, using the *Zettlekasten* method would be ideal as it is devoid of hierarchical structure, thus allowing pure linkages that are not tainted with biases or influencing on how it is perceived by the framework in which it resides. However, for other things it may be more useful to integrate everything in a more hierarchical fashion and create links between different hierarchies.

In order to maintain these various usecases, the content of each should be stored outside the =org-roam= directory (to avoid duplication). 

#+begin_src emacs-lisp

  ;; (setq zettlekasten-paths-alist '(("Main" . "~/Trove/Epektasi/")
  ;;                                  ("Zettlekasten" . "~/Trove/Zettlekasten/")
  ;;                                  ("Test" . "~/OrgRoamTest/")))

  ;; (defun switch-zettlekasten ()
  ;;   (interactive)
  ;;   (let* ((keys (mapcar #'car zettlekasten-paths-alist))
  ;;          (prompt (format "Select Zettlekasten:"))
  ;;          (key (completing-read prompt keys))
  ;;          (chosen-zettlekasten-path (cdr (assoc key zettlekasten-paths-alist))))
  ;;     (setq org-roam-directory chosen-zettlekasten-path)
  ;;     (setq org-roam-db-location (concat chosen-zettlekasten-path "org-roam.db"))
  ;;     (org-roam-db-sync)))

#+end_src
*** Org-roam-ui

=org-roam-ui= is used to visualize =org-roam= web. 

#+begin_src emacs-lisp

  ;; (use-package org-roam-ui
  ;;   :ensure t)

#+end_src

