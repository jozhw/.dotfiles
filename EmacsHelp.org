#+title: Emacs Help

The purpose of =EmacsHelp.org= is to keep documentation on setups and configurations that are beyond the scope of =Emacs.org=. Any help with identifying key commands for Emacs or its packages will be in the =EmacsCommands.org= file.
  
** Setting up GPG

*** Signing for Github

**** On Github

After creating the =gpg-key= make sure the follow the directions on =github= to upload the key on your account. After that is done follow the instructions below.

**** On Local

Make sure the =.gitconfig= is configured to have the =signingkey= ready. To do so you can simply run:

#+begin_src shell

  git config --global user.signingkey <YOUR_KEY_ID>

#+end_src

Trust the key (can skip, however may be necessary).

#+begin_src shell

  gpg --edit-key <YOUR_KEY_ID>

#+end_src

Start the =gpg-agent=.

#+begin_src shell

  gpgconf --launch gpg-agent

#+end_src

Use =pinentry=. Depending on your os, there are different versions of =pinentry=. For example for =macos= there is =pinentry-mac=.

For =pinentry= create a =~/.gnupg/gpg-agent.conf= file and add:

#+begin_src shell

  # if not sure of path run `which pinentry` for the case of macos
  # run `which pinentry-mac`

  pinentry-program <PATH_TO_PINENTRY>

#+end_src

Restart the =gpg-agent=.

#+begin_src shell

  gpgconf --kill gpg-agent
  gpgconf --launch gpg-agent
  
#+end_src

Make sure the =GPG_TTY= environment variable is set and then source the configuration.

#+begin_src shell

  export GPG_TTY=$(tty)

#+end_src

* Org

To change the view to outline or full view use =SHIFT-TAB= repeatedly for the desired visual look.

To condense or uncondense content under a heading, make sure the cursor is on the same line as the heading and use =TAB= to cycle through uncondensing or condensing the content.

** Org-Latex

[[https://jakebox.github.io/youtube/org_latex_video.html][Straightfoward Emacs guide]]. The following is copied from that guide.

*** Create & include a =SETUPFILE=

A =SETUPFILE= is simply a file that contains some sort of org mode configuration. For example, the =#+LATEX_CLASS:= we saw earlier. Or, maybe =#+LATEX_HEADER:=. It could even be as simple as =#+TITLE:=. In this =SETUPFILE= we can place all of our lines of LaTeX code we want included in the final generated document. This is a very powerful and easy method of perfectly customizing our export.

Linking the =SETUPFILE=:

#+BEGIN_SRC

#+SETUPFILE: ~/Dropbox/Mackup/emacs-stuff/org/jake-standard-latex-export.org

#+END_SRC

*** Structure the =SETUPFILE=

Now, in that =SETUPFILE=, we place the LaTeX lines we normally would put in a =.tex= file. For example, =\usepackage{amsmath}=. Hopefully you have your own favorite =.tex= file setup, but if not I suggest learning LaTeX and/or finding a template online.

I suggest using a macro to add =#+LATEX_CLASS:= to each line, rather than typing it manually of course! Notice the =LaTeX_CLASS:= - the custom one we just created.

#+BEGIN_SRC

#+LaTeX_CLASS: org-plain-latex
#+LaTeX_CLASS_OPTIONS: [letter]
#+LATEX_HEADER: \usepackage{lmodern} % Ensures we have the right font

#+LATEX_HEADER: \usepackage[AUTO]{inputenc}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{amsmath, amsthm, amssymb}
#+LATEX_HEADER: \usepackage[table, xcdraw]{xcolor}

% and so on...

#+END_SRC

*** Extra Notes

Some notes not covered in the video.

Enable using =listings= for code highlighting

#+begin_src emacs-lisp

  (setq org-latex-listings 't)

#+end_src

In your =SETUPFILE:=

#+BEGIN_SRC

#+LATEX_HEADER: \usepackage{listings}

#+END_SRC

If you enable =org-latex-listings= but donâ€™t include the =listings= package in your TeX file, it will likely not compile (if you are exporting an org file with code blocks).

Useful commands

- =org-latex-preview= - toggles preview LaTeX math at point

