#+title: Emacs Archive: Deprecated Emacs Configurations (=.archive/emacs/=)

The following code consists of legacy code that is no longer used in this emacs configuration. However, it is recommended to keep a history of the previous configurations that I used for packages no longer used as references, which on rare occasion be reinstated.

* =org-roam.el= Configurations

#+begin_src emacs-lisp :tangle ".archive/emacs/org-roam.el" :mkdirp yes

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/OrgRoamTest/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    If using org-roam-protocol
    (require 'org-roam-protocol))

#+end_src

Code taken and adjusted for my usecase from [[https://www.reddit.com/r/emacs/comments/135dhh5/code_snippet_to_switch_between_multiple/][@SnooPets20's post.]]

The idea of this switching is to maximize the utility of =org-roam=. In some cases, especially when learning new things, using the *Zettlekasten* method would be ideal as it is devoid of hierarchical structure, thus allowing pure linkages that are not tainted with biases or influencing on how it is perceived by the framework in which it resides. However, for other things it may be more useful to integrate everything in a more hierarchical fashion and create links between different hierarchies.

In order to maintain these various usecases, the content of each should be stored outside the =org-roam= directory (to avoid duplication). 

#+begin_src emacs-lisp :tangle ".archive/emacs/org-roam.el" :mkdirp yes

  (setq zettlekasten-paths-alist '(("Main" . "~/Trove/Epektasi/")
                                   ("Zettlekasten" . "~/Trove/Zettlekasten/")
                                   ("Test" . "~/OrgRoamTest/")))

  (defun switch-zettlekasten ()
    (interactive)
    (let* ((keys (mapcar #'car zettlekasten-paths-alist))
           (prompt (format "Select Zettlekasten:"))
           (key (completing-read prompt keys))
           (chosen-zettlekasten-path (cdr (assoc key zettlekasten-paths-alist))))
      (setq org-roam-directory chosen-zettlekasten-path)
      (setq org-roam-db-location (concat chosen-zettlekasten-path "org-roam.db"))
      (org-roam-db-sync)))

#+end_src

* =org-roam-ui.el= Configurations

=org-roam-ui= is used to visualize =org-roam= web. 

#+begin_src emacs-lisp :tangle ".archive/emacs/org-roam-ui.el" :mkdirp yes

  (use-package org-roam-ui
    :ensure t)

#+end_src

* =which-key.el= Configurations

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix. For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp :tangle ".archive/emacs/which-key.el" :mkdirp yes

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src
* =projectile.el= Configurations

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp :tangle ".archive/emacs/projectile.el" :mkdirp yes

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/projects-code")
      (setq projectile-project-search-path '("~/projects-code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

#+begin_src emacs-lisp :tangle ".archive/emacs/projectile.el" :mkdirp yes

  (jw/leader-key-def
    "pf"  'projectile-find-file
    "ps"  'projectile-switch-project
    "pp"  'projectile-find-file
    "pc"  'projectile-compile-project
    "pd"  'projectile-dired)

#+end_src

*** Rationale for Archiving

The reason why =projectile= is archived is because I want to utilize the built in emacs package =project.el=. Additionally, my previous configuration utilized =ivy= and currently I am not using it for my completion system. I have also noticed that =project.el= encountered significant amount of lag when changing to a project file, thus to mitigate that lag, I have decided to switch away from =projectile=. Note, there are amazing features that =projectile= offers, however I do not use them, so I see no point in using =projectile= anymore. 

* =org-tangle= Configuration

The following line =#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el :mkdirp yes= cause the tangle command to compile and save the code blocks in the =.emacs.d/init.el= file.

; #+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el :mkdirp yes

* =doom-themes.el= Configuration

I currently am using the [[https://github.com/hlissner/emacs-doom-themes][DOOM Themes]], specifically =doom-dracula=.

#+begin_src emacs-lisp :tangle ".archive/emacs/doom-themes.el" :mkdirp yes

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

#+end_src

* =doom-modeline.el= Configuration


[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

If you are running in the =macos= terminal, then you have to make sure that you set the font to =Droid Sans Mono Nerd Font Complete 18=. You can do this by the following steps:

- Navigate to =Settings=
- Navigate to =Profiles= tab
- Navigate to =Text= subtab
- Under the =Font= menu click on =Change=
- Select the appropriate font


#+begin_src emacs-lisp :tangle ".archive/emacs/doom-modeline.el" :mkdirp yes

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src


=doom-modeline= icons rely on =nerd-icons=. Thus, you must install the =nerd-icons= if you want to use the icons on the modeline.

#+begin_src emacs-lisp :tangle ".archive/emacs/doom-modeline.el" :mkdirp yes

  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )

#+end_src


To turn off icons uncomment the following:

#+begin_src emacs-lisp :tangle ".archive/emacs/doom-modeline.el" :mkdirp yes

  ;; (setq doom-modeline-icon nil)

#+end_src


The following contains configurations of the =doom-modeline=. All the configurations here use the =setq=.


#+begin_src emacs-lisp :tangle ".archive/emacs/doom-modeline.el" :mkdirp yes

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count t)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

#+end_src


Display the virtual environment version.

#+begin_src emacs-lisp :tangle ".archive/emacs/doom-modeline.el" :mkdirp yes

  (setq doom-modeline-env-version t)

#+end_src

* =hydra.el= Configuration

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp :tangle ".archive/emacs/hydra.el" :mkdirp yes

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (jw/leader-key-def
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src
